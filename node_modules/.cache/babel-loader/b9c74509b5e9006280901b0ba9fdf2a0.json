{"ast":null,"code":"export default {\n  props: {\n    modelValue: {\n      type: Number,\n      default: () => 1\n    },\n    rowsNumber: {\n      type: Number,\n      default: () => 0\n    },\n    rowsPerPage: {\n      type: Number,\n      default: () => 0\n    },\n    maxVisible: {\n      // Max buttons in a row\n      type: Number,\n      default: () => 5\n    }\n  },\n  computed: {\n    pages() {\n      function range(start, end) {\n        return Array.from(Array(end - start + 1), (_, i) => i + start);\n      }\n\n      const max = this.maxVisible;\n      const middle = Math.floor(this.maxVisible / 2);\n      const pageNum = Math.ceil(this.rowsNumber / this.rowsPerPage);\n\n      if (pageNum < max) {\n        return range(1, pageNum);\n      }\n\n      let start = this.modelValue - middle;\n      let end = this.modelValue + middle; // If we're close to the end\n\n      if (this.modelValue >= pageNum - middle) {\n        start = pageNum - max + 1;\n        end = pageNum;\n      }\n\n      return range(Math.max(1, start), Math.max(end, max));\n    }\n\n  }\n}; // export default {\n//   props: {\n//     pagination: {\n//       type: Number,\n//       required: true,\n//     },\n//     offset: {\n//       type: Number,\n//       default: 4,\n//     },\n//     // data() {\n//     //   return {\n//     //     pagination: this.pagination_prop,\n//     //   };\n//     // },\n//   },\n//   computed: {\n//     pagesNumber() {\n//       console.log(this.pagination.current_page);\n//       if (!this.pagination.to) {\n//         return [];\n//       }\n//       let from = this.pagination.current_page - this.offset;\n//       if (from < 1) {\n//         from = 1;\n//       }\n//       let to = from + this.offset * 2;\n//       if (to >= this.pagination.last_page) {\n//         to = this.pagination.last_page;\n//       }\n//       let pagesArray = [];\n//       for (let page = from; page <= to; page++) {\n//         pagesArray.push(page);\n//       }\n//       return pagesArray;\n//     },\n//   },\n//   methods: {\n//     da() {\n//       console.log(this.pagination.current_page);\n//     },\n//     // changePage(page) {\n//     //   this.pagination.current_page = page;\n//     //   this.$emit(\"paginate\");\n//     // },\n//   },\n// };","map":{"version":3,"mappings":"AA+BA,eAAe;EACZA,KAAK,EAAE;IACFC,UAAU,EAAE;MACRC,IAAI,EAAEC,MADE;MAERC,OAAO,EAAE,MAAM;IAFP,CADV;IAKFC,UAAU,EAAE;MACRH,IAAI,EAAEC,MADE;MAERC,OAAO,EAAE,MAAM;IAFP,CALV;IASFE,WAAW,EAAE;MACTJ,IAAI,EAAEC,MADG;MAETC,OAAO,EAAE,MAAM;IAFN,CATX;IAaFG,UAAU,EAAE;MACR;MACAL,IAAI,EAAEC,MAFE;MAGRC,OAAO,EAAE,MAAM;IAHP;EAbV,CADK;EAoBbI,QAAQ,EAAE;IACRC,KAAK,GAAG;MACN,SAASC,KAAT,CAAeC,KAAf,EAAsBC,GAAtB,EAA2B;QACzB,OAAOC,KAAK,CAACC,IAAN,CAAWD,KAAK,CAACD,GAAE,GAAID,KAAN,GAAc,CAAf,CAAhB,EAAmC,CAACI,CAAD,EAAIC,CAAJ,KAAUA,IAAIL,KAAjD,CAAP;MACF;;MAEA,MAAMM,GAAE,GAAI,KAAKV,UAAjB;MACA,MAAMW,MAAK,GAAIC,IAAI,CAACC,KAAL,CAAW,KAAKb,UAAL,GAAkB,CAA7B,CAAf;MACA,MAAMc,OAAM,GAAIF,IAAI,CAACG,IAAL,CAAU,KAAKjB,UAAL,GAAkB,KAAKC,WAAjC,CAAhB;;MAEA,IAAIe,OAAM,GAAIJ,GAAd,EAAmB;QACjB,OAAOP,KAAK,CAAC,CAAD,EAAIW,OAAJ,CAAZ;MACF;;MAEA,IAAIV,KAAI,GAAI,KAAKV,UAAL,GAAkBiB,MAA9B;MACA,IAAIN,GAAE,GAAI,KAAKX,UAAL,GAAkBiB,MAA5B,CAdM,CAgBN;;MACA,IAAI,KAAKjB,UAAL,IAAmBoB,OAAM,GAAIH,MAAjC,EAAyC;QACvCP,KAAI,GAAIU,OAAM,GAAIJ,GAAV,GAAgB,CAAxB;QACAL,GAAE,GAAIS,OAAN;MACF;;MAEA,OAAOX,KAAK,CAACS,IAAI,CAACF,GAAL,CAAS,CAAT,EAAYN,KAAZ,CAAD,EAAqBQ,IAAI,CAACF,GAAL,CAASL,GAAT,EAAcK,GAAd,CAArB,CAAZ;IACD;;EAxBO;AApBG,CAAf,C,CA+CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA","names":["props","modelValue","type","Number","default","rowsNumber","rowsPerPage","maxVisible","computed","pages","range","start","end","Array","from","_","i","max","middle","Math","floor","pageNum","ceil"],"sourceRoot":"","sources":["/var/www/html/newData/mansi/my-vuejs-final/src/components/NewPagination.vue"],"sourcesContent":["<template>\n  <link\n    href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css\"\n    rel=\"stylesheet\"\n    integrity=\"sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC\"\n    crossorigin=\"anonymous\"\n  />\n  <ul class=\"pagination\">\n    <li class=\"page-item\">\n      <a class=\"page-link\" @click=\"onPageBack\">\n        <i class=\"fas fa-angle-left\"></i>\n      </a>\n    </li>\n  </ul>\n  <ul v-for=\"(i, y) in pages\" :key=\"i.id\">\n    <li\n      v-if=\"y < maxVisible\"\n      :key=\"'pagination-page-' + i\"\n      :class=\"{ 'page-item': 1, active: modelValue == i }\"\n    >\n      <a class=\"page-link\" @click=\"onPageClick(i)\">{{ i }}</a>\n    </li>\n\n    <li class=\"page-item\">\n      <a class=\"page-link\" @click=\"onPageForward\">\n        <i class=\"fas fa-angle-right\"></i>\n      </a>\n    </li>\n  </ul>\n</template>\n<script>\nexport default {\n   props: {\n        modelValue: {\n            type: Number,\n            default: () => 1,\n        },\n        rowsNumber: {\n            type: Number,\n            default: () => 0,\n        },\n        rowsPerPage: {\n            type: Number,\n            default: () => 0,\n        },\n        maxVisible: {\n            // Max buttons in a row\n            type: Number,\n            default: () => 5,\n        },\n    },\n  computed: {\n    pages() {\n      function range(start, end) {\n        return Array.from(Array(end - start + 1), (_, i) => i + start);\n      }\n\n      const max = this.maxVisible;\n      const middle = Math.floor(this.maxVisible / 2);\n      const pageNum = Math.ceil(this.rowsNumber / this.rowsPerPage);\n\n      if (pageNum < max) {\n        return range(1, pageNum);\n      }\n\n      let start = this.modelValue - middle;\n      let end = this.modelValue + middle;\n\n      // If we're close to the end\n      if (this.modelValue >= pageNum - middle) {\n        start = pageNum - max + 1;\n        end = pageNum;\n      }\n\n      return range(Math.max(1, start), Math.max(end, max));\n    },\n  },\n};\n// export default {\n//   props: {\n//     pagination: {\n//       type: Number,\n//       required: true,\n//     },\n//     offset: {\n//       type: Number,\n//       default: 4,\n//     },\n//     // data() {\n//     //   return {\n//     //     pagination: this.pagination_prop,\n//     //   };\n//     // },\n//   },\n//   computed: {\n//     pagesNumber() {\n//       console.log(this.pagination.current_page);\n//       if (!this.pagination.to) {\n//         return [];\n//       }\n//       let from = this.pagination.current_page - this.offset;\n//       if (from < 1) {\n//         from = 1;\n//       }\n//       let to = from + this.offset * 2;\n//       if (to >= this.pagination.last_page) {\n//         to = this.pagination.last_page;\n//       }\n//       let pagesArray = [];\n//       for (let page = from; page <= to; page++) {\n//         pagesArray.push(page);\n//       }\n//       return pagesArray;\n//     },\n//   },\n//   methods: {\n//     da() {\n//       console.log(this.pagination.current_page);\n//     },\n\n//     // changePage(page) {\n//     //   this.pagination.current_page = page;\n//     //   this.$emit(\"paginate\");\n//     // },\n//   },\n// };\n</script>\n<style scoped>\nul.pagination {\n  display: flex;\n  padding-left: 0;\n  list-style: none;\n  border-radius: 0.25rem;\n}\nli.page-item {\n  line-height: 24px;\n  margin-right: 0.5rem;\n}\na.page-link {\n  padding: 0;\n  width: 40px;\n  height: 40px;\n  display: block;\n  font-size: 1rem;\n  line-height: 40px;\n  user-select: none;\n  position: relative;\n  text-align: center;\n  border-radius: 50%;\n  border: 2px solid #999;\n  box-sizing: content-box;\n  background: transparent;\n}\n\n&.active > a.page-link,\n> a.page-link:hover {\n  color: #fff;\n  cursor: pointer;\n  border-color: #028ce8;\n  background-color: #028ce8;\n}\n</style>\n"]},"metadata":{},"sourceType":"module"}