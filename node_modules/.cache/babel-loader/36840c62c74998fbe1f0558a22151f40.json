{"ast":null,"code":"import { createElementVNode as _createElementVNode, createCommentVNode as _createCommentVNode, vModelText as _vModelText, normalizeClass as _normalizeClass, withDirectives as _withDirectives, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, Transition as _Transition, withCtx as _withCtx, createVNode as _createVNode, withModifiers as _withModifiers } from \"vue\";\n\nconst _hoisted_1 = /*#__PURE__*/_createElementVNode(\"h1\", null, \"Reset Password View\", -1\n/* HOISTED */\n);\n\nconst _hoisted_2 = /*#__PURE__*/_createElementVNode(\"label\", {\n  for: \"password\"\n}, \"Password\", -1\n/* HOISTED */\n);\n\nconst _hoisted_3 = /*#__PURE__*/_createElementVNode(\"label\", {\n  for: \"C_pwd\"\n}, \"Confirm Password\", -1\n/* HOISTED */\n);\n\nconst _hoisted_4 = {\n  key: 0,\n  class: \"hints\"\n};\n\nconst _hoisted_5 = /*#__PURE__*/_createElementVNode(\"h2\", null, \"Hints\", -1\n/* HOISTED */\n);\n\nconst _hoisted_6 = {\n  key: 0,\n  class: \"matches\"\n};\n\nconst _hoisted_7 = /*#__PURE__*/_createElementVNode(\"p\", null, \"Passwords don't match.\", -1\n/* HOISTED */\n);\n\nconst _hoisted_8 = [_hoisted_7];\n\nconst _hoisted_9 = /*#__PURE__*/_createElementVNode(\"button\", {\n  class: \"btn\"\n}, \"Set A New Password\", -1\n/* HOISTED */\n);\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", null, [_hoisted_1, _createElementVNode(\"form\", {\n    onSubmit: _cache[2] || (_cache[2] = _withModifiers((...args) => $options.resetPassword && $options.resetPassword(...args), [\"prevent\"]))\n  }, [_createCommentVNode(\" <div>\\n        <label for=\\\"email\\\">email</label>\\n        <input type=\\\"email\\\" id=\\\"email\\\" class=\\\"input\\\" v-model=\\\"formData.email\\\" />\\n      </div> \"), _createElementVNode(\"div\", null, [_hoisted_2, _withDirectives(_createElementVNode(\"input\", {\n    type: \"text\",\n    id: \"password\",\n    class: _normalizeClass([\"input\", {\n      valid: $options.passwordValidation.valid\n    }]),\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $data.formData.password = $event)\n  }, null, 2\n  /* CLASS */\n  ), [[_vModelText, $data.formData.password]])]), _createElementVNode(\"div\", null, [_hoisted_3, _withDirectives(_createElementVNode(\"input\", {\n    type: \"text\",\n    id: \"c_password\",\n    class: \"input\",\n    \"onUpdate:modelValue\": _cache[1] || (_cache[1] = $event => $data.formData.password_confirmation = $event)\n  }, null, 512\n  /* NEED_PATCH */\n  ), [[_vModelText, $data.formData.password_confirmation]])]), _createVNode(_Transition, {\n    name: \"hint\",\n    appear: \"\"\n  }, {\n    default: _withCtx(() => [$options.passwordValidation.errors.length > 0 && !_ctx.submitted ? (_openBlock(), _createElementBlock(\"div\", _hoisted_4, [_hoisted_5, (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($options.passwordValidation.errors, error => {\n      return _openBlock(), _createElementBlock(\"p\", {\n        key: error.id\n      }, _toDisplayString(error), 1\n      /* TEXT */\n      );\n    }), 128\n    /* KEYED_FRAGMENT */\n    ))])) : _createCommentVNode(\"v-if\", true)]),\n    _: 1\n    /* STABLE */\n\n  }), $options.notSamePasswords ? (_openBlock(), _createElementBlock(\"div\", _hoisted_6, _hoisted_8)) : _createCommentVNode(\"v-if\", true), _createElementVNode(\"div\", null, _toDisplayString(_ctx.message), 1\n  /* TEXT */\n  ), _hoisted_9], 32\n  /* HYDRATE_EVENTS */\n  )]);\n}","map":{"version":3,"mappings":";;gCAEIA,oBAA4B,IAA5B,EAA4B,IAA5B,EAAI,qBAAJ,EAAuB;AAAA;AAAvB;;gCAOIA,oBAAsC,OAAtC,EAAsC;EAA/BC,GAAG,EAAC;AAA2B,CAAtC,EAAsB,UAAtB,EAA8B;AAAA;AAA9B;;gCAUAD,oBAA2C,OAA3C,EAA2C;EAApCC,GAAG,EAAC;AAAgC,CAA3C,EAAmB,kBAAnB,EAAmC;AAAA;AAAnC;;;;EAWEC,KAAK,EAAC;;;gCAENF,oBAAc,IAAd,EAAc,IAAd,EAAI,OAAJ,EAAS;AAAA;AAAT;;;;EAMCE,KAAK,EAAC;;;gCACTF,oBAA6B,GAA7B,EAA6B,IAA7B,EAAG,wBAAH,EAAyB;AAAA;AAAzB;;oBAAAG;;gCAKFH,oBAA+C,QAA/C,EAA+C;EAAvCE,KAAK,EAAC;AAAiC,CAA/C,EAAoB,oBAApB,EAAsC;AAAA;AAAtC;;;uBA3CJE,oBA6CM,KA7CN,EA6CM,IA7CN,EA6CM,CA5CJC,UA4CI,EA3CJL,oBA0CO,MA1CP,EA0CO;IA1CAM,QAAM,wDAAUC,yDAAV,EAAuB,WAAvB;EA0CN,CA1CP,GACEC,oLAIAR,oBASM,KATN,EASM,IATN,EASM,CARJS,UAQI,kBAPJT,oBAME,OANF,EAME;IALAU,IAAI,EAAC,MAKL;IAJAC,EAAE,EAAC,UAIH;IAHAT,KAAK,mBAAC,OAAD,EAAQ;MAAAU,OAEIL,4BAAmBK;IAFvB,CAAR,EAGL;+DAFSC,eAASC,WAAQC;EAE1B,CANF;;EAAA,kBAIWF,eAASC,WAGhB,CATN,GAUAd,oBAQM,KARN,EAQM,IARN,EAQM,CAPJgB,UAOI,kBANJhB,oBAKE,OALF,EAKE;IAJAU,IAAI,EAAC,MAIL;IAHAC,EAAE,EAAC,YAGH;IAFAT,KAAK,EAAC,OAEN;+DADSW,eAASI,wBAAqBF;EACvC,CALF;;EAAA,kBAIWF,eAASI,wBAEhB,CARN,GASAC,aAUaC,WAVb,EAUa;IAVDC,IAAI,EAAC,MAUJ;IAVWC,MAAM,EAAN;EAUX,CAVb;sBACE,MAQM,CAPEd,4BAAmBe,MAAnB,CAA0BC,MAA1B,GAAgC,CAAhC,IAAgC,CAASC,gCADjDpB,oBAQM,KARN,cAQM,CAJJqB,UAII,qBAHJrB,oBAEIsB,SAFJ,EAEI,IAFJ,EAEIC,YAFepB,4BAAmBe,MAElC,EAFMM,KAAkC,IAA7B;2BAAfxB,oBAEI,GAFJ,EAEI;QAF2CyB,GAAG,EAAED,KAAK,CAACjB;MAEtD,CAFJ,mBACKiB,MADL,EACU;MAAA;MADV;KAEI,CAFJ;;IAAA,CAGI,EARN,sCAQM;;;;GATR,GAW2BrB,2CAA3BH,oBAEM,KAFN,cAEM0B,UAFN,wCAGA9B,oBAEM,KAFN,EAEM,IAFN,EAEM+B,iBADDP,YACC,CAFN,EACY;EAAA;EADZ,GAGAQ,WAzCF;;EAAA,CA2CI,CA7CN","names":["_createElementVNode","for","class","_hoisted_7","_createElementBlock","_hoisted_1","onSubmit","$options","_createCommentVNode","_hoisted_2","type","id","valid","$data","password","$event","_hoisted_3","password_confirmation","_createVNode","_Transition","name","appear","errors","length","_ctx","_hoisted_5","_Fragment","_renderList","error","key","_hoisted_8","_toDisplayString","_hoisted_9"],"sourceRoot":"","sources":["/var/www/html/newData/mansi/my-vuejs-final/src/views/ResetPasswordView.vue"],"sourcesContent":["<template>\n  <div>\n    <h1>Reset Password View</h1>\n    <form @submit.prevent=\"resetPassword\">\n      <!-- <div>\n        <label for=\"email\">email</label>\n        <input type=\"email\" id=\"email\" class=\"input\" v-model=\"formData.email\" />\n      </div> -->\n      <div>\n        <label for=\"password\">Password</label>\n        <input\n          type=\"text\"\n          id=\"password\"\n          class=\"input\"\n          v-model=\"formData.password\"\n          :class=\"{ valid: passwordValidation.valid }\"\n        />\n      </div>\n      <div>\n        <label for=\"C_pwd\">Confirm Password</label>\n        <input\n          type=\"text\"\n          id=\"c_password\"\n          class=\"input\"\n          v-model=\"formData.password_confirmation\"\n        />\n      </div>\n      <transition name=\"hint\" appear>\n        <div\n          v-if=\"passwordValidation.errors.length > 0 && !submitted\"\n          class=\"hints\"\n        >\n          <h2>Hints</h2>\n          <p v-for=\"error in passwordValidation.errors\" :key=\"error.id\">\n            {{ error }}\n          </p>\n        </div>\n      </transition>\n      <div class=\"matches\" v-if=\"notSamePasswords\">\n        <p>Passwords don't match.</p>\n      </div>\n      <div>\n        {{ message }}\n      </div>\n      <button class=\"btn\">Set A New Password</button>\n    </form>\n  </div>\n</template>\n\n<script>\nimport axios from \"axios\";\nexport default {\n  data() {\n    return {\n      formData: {\n        // email: \"\",\n        password: \"\",\n        password_confirmation: \"\",\n        message: \"\",\n        submitted: false,\n      },\n      rules: [\n        { message: \"8 characters minimum.\", regex: /.{8,}/ },\n        { message: \"number required.\", regex: /[0-9]+/ },\n      ],\n    };\n  },\n  methods: {\n    async resetPassword() {\n      const response = await axios.post(\n        \"http://192.168.1.2:8000/api/reset-password\",\n     {\n        // email: this.formData.email,\n        password: this.formData.password,\n        password_confirmation: this.formData.password_confirmation,\n        token: this.$route.params.token,\n      });\n      console.log(response);\n      console.log(this.$route.params.token);\n      if (response) {\n        this.formData.message = \"your password updated successfully\";\n        this.$router.push(\"/apiLogin\");\n      }\n    },\n  },\n  computed: {\n    notSamePasswords() {\n      if (this.passwordsFilled) {\n        return this.formData.password !== this.formData.password_confirmation;\n      } else {\n        return false;\n      }\n    },\n    passwordsFilled() {\n      return (\n        this.formData.password !== \"\" && this.formData.confirm_password !== \"\"\n      );\n    },\n    passwordValidation() {\n      let errors = [];\n      for (let condition of this.rules) {\n        if (!condition.regex.test(this.formData.password)) {\n          errors.push(condition.message);\n        }\n        // return { $router({ name:\"apiLogin\"}) };\n      }\n      if (errors.length === 0) {\n        return { valid: true, errors };\n      } else {\n        return { valid: false, errors };\n      }\n    },\n  },\n};\n</script>\n\n<style scoped></style>\n"]},"metadata":{},"sourceType":"module"}