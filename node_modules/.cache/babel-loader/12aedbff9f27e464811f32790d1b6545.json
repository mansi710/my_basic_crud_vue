{"ast":null,"code":"import { createElementVNode as _createElementVNode, vModelText as _vModelText, withDirectives as _withDirectives, normalizeClass as _normalizeClass, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, createCommentVNode as _createCommentVNode, Transition as _Transition, withCtx as _withCtx, createVNode as _createVNode, withModifiers as _withModifiers } from \"vue\";\n\nconst _hoisted_1 = /*#__PURE__*/_createElementVNode(\"label\", {\n  for: \"name\"\n}, \"User Name\", -1\n/* HOISTED */\n);\n\nconst _hoisted_2 = /*#__PURE__*/_createElementVNode(\"label\", {\n  for: \"email\"\n}, \"User Email\", -1\n/* HOISTED */\n);\n\nconst _hoisted_3 = /*#__PURE__*/_createElementVNode(\"label\", {\n  for: \"password\"\n}, \"password\", -1\n/* HOISTED */\n);\n\nconst _hoisted_4 = /*#__PURE__*/_createElementVNode(\"label\", {\n  for: \"C_pwd\"\n}, \"Confirm Password\", -1\n/* HOISTED */\n);\n\nconst _hoisted_5 = {\n  key: 0,\n  class: \"hints\"\n};\n\nconst _hoisted_6 = /*#__PURE__*/_createElementVNode(\"h2\", null, \"Hints\", -1\n/* HOISTED */\n);\n\nconst _hoisted_7 = [_hoisted_6];\nconst _hoisted_8 = {\n  key: 0,\n  class: \"matches\"\n};\n\nconst _hoisted_9 = /*#__PURE__*/_createElementVNode(\"p\", null, \"Passwords don't match.\", -1\n/* HOISTED */\n);\n\nconst _hoisted_10 = [_hoisted_9];\n\nconst _hoisted_11 = /*#__PURE__*/_createElementVNode(\"button\", {\n  class: \"btn\"\n}, \"Sign Up\", -1\n/* HOISTED */\n);\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", null, [_createElementVNode(\"form\", {\n    onSubmit: _cache[4] || (_cache[4] = _withModifiers((...args) => $options.CreatePost && $options.CreatePost(...args), [\"prevent\"]))\n  }, [_createElementVNode(\"div\", null, [_hoisted_1, _withDirectives(_createElementVNode(\"input\", {\n    type: \"text\",\n    id: \"name\",\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $data.formData.name = $event),\n    placeholder: \"Enter name\",\n    class: \"input\",\n    required: \"\"\n  }, null, 512\n  /* NEED_PATCH */\n  ), [[_vModelText, $data.formData.name]])]), _createElementVNode(\"div\", null, [_hoisted_2, _withDirectives(_createElementVNode(\"input\", {\n    type: \"text\",\n    id: \"email\",\n    \"onUpdate:modelValue\": _cache[1] || (_cache[1] = $event => $data.formData.email = $event),\n    placeholder: \"Enter Email\",\n    class: \"input\",\n    required: \"\"\n  }, null, 512\n  /* NEED_PATCH */\n  ), [[_vModelText, $data.formData.email]])]), _createElementVNode(\"div\", null, [_hoisted_3, _withDirectives(_createElementVNode(\"input\", {\n    type: \"text\",\n    id: \"password\",\n    \"onUpdate:modelValue\": _cache[2] || (_cache[2] = $event => $data.formData.password = $event),\n    placeholder: \"Enter Password\",\n    class: _normalizeClass([\"input\", {\n      valid: $options.passwordValidation.valid\n    }]),\n    required: \"\"\n  }, null, 2\n  /* CLASS */\n  ), [[_vModelText, $data.formData.password]])]), _createElementVNode(\"div\", null, [_hoisted_4, _withDirectives(_createElementVNode(\"input\", {\n    type: \"text\",\n    id: \"c_password\",\n    \"onUpdate:modelValue\": _cache[3] || (_cache[3] = $event => $data.formData.confirm_password = $event),\n    placeholder: \"Enter Confirm Password\",\n    class: \"input\",\n    required: \"\"\n  }, null, 512\n  /* NEED_PATCH */\n  ), [[_vModelText, $data.formData.confirm_password]])]), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($options.passwordValidation.errors, error => {\n    return _openBlock(), _createElementBlock(\"p\", {\n      key: error.id\n    }, _toDisplayString(error), 1\n    /* TEXT */\n    );\n  }), 128\n  /* KEYED_FRAGMENT */\n  )), _createVNode(_Transition, {\n    name: \"hint\",\n    appear: \"\"\n  }, {\n    default: _withCtx(() => [$options.passwordValidation.errors.length > 0 && !_ctx.submitted ? (_openBlock(), _createElementBlock(\"div\", _hoisted_5, _hoisted_7)) : _createCommentVNode(\"v-if\", true)]),\n    _: 1\n    /* STABLE */\n\n  }), $options.notSamePasswords ? (_openBlock(), _createElementBlock(\"div\", _hoisted_8, _hoisted_10)) : _createCommentVNode(\"v-if\", true), _hoisted_11], 32\n  /* HYDRATE_EVENTS */\n  )]);\n}","map":{"version":3,"mappings":"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","names":["_createElementVNode","for","class","_hoisted_6","_hoisted_9","_createElementBlock","onSubmit","$options","_hoisted_1","type","id","$data","name","$event","placeholder","required","_hoisted_2","email","_hoisted_3","password","valid","_hoisted_4","confirm_password","_Fragment","_renderList","errors","error","key","_createVNode","_Transition","appear","length","_ctx","_hoisted_7","_hoisted_10","_hoisted_11"],"sourceRoot":"","sources":["/var/www/html/newData/mansi/my-vuejs-final/src/views/RegisterC.vue"],"sourcesContent":["<template>\n  <div>\n    <form @submit.prevent=\"CreatePost\">\n      <div>\n        <label for=\"name\">User Name</label>\n        <input\n          type=\"text\"\n          id=\"name\"\n          v-model=\"formData.name\"\n          placeholder=\"Enter name\"\n          class=\"input\"\n          required\n        />\n      </div>\n      <div>\n        <label for=\"email\">User Email</label>\n        <input\n          type=\"text\"\n          id=\"email\"\n          v-model=\"formData.email\"\n          placeholder=\"Enter Email\"\n          class=\"input\"\n          required\n        />\n      </div>\n      <div>\n        <label for=\"password\">password</label>\n        <input\n          type=\"text\"\n          id=\"password\"\n          v-model=\"formData.password\"\n          placeholder=\"Enter Password\"\n          class=\"input\"\n          :class=\"{ valid: passwordValidation.valid }\"\n          required\n        />\n      </div>\n      <div>\n        <label for=\"C_pwd\">Confirm Password</label>\n        <input\n          type=\"text\"\n          id=\"c_password\"\n          v-model=\"formData.confirm_password\"\n          placeholder=\"Enter Confirm Password\"\n          class=\"input\"\n          required\n        />\n      </div>\n      <p v-for=\"error in passwordValidation.errors\" :key=\"error.id\">\n        {{ error }}\n          </p>\n      <transition name=\"hint\" appear>\n        <div\n          v-if=\"passwordValidation.errors.length > 0 && !submitted\"\n          class=\"hints\"\n        >\n          <h2>Hints</h2>\n        </div>\n      </transition>\n      <div class=\"matches\" v-if=\"notSamePasswords\">\n        <p>Passwords don't match.</p>\n      </div>\n      <button class=\"btn\">Sign Up</button>\n    </form>\n  </div>\n</template>\n\n<script>\n// import { required, minLength, maxLength, sameAs } from \"vuelidate/lib/validators\";\nimport axios from \"axios\";\nexport default {\n  name: \"CreatePost\",\n  data() {\n    return {\n      formData: {\n        // userId: \"\",\n        name: \"\",\n        email: \"\",\n        password: \"\",\n        confirm_password: \"\",\n        submitted: false,\n      },\n      rules: [\n        // { message: \"One lowercase letter required.\", regex: /[a-z]+/ },\n        // { message: \"One uppercase letter required.\", regex: /[A-Z]+/ },\n        { message: \"8 characters minimum.\", regex: /.{8,}/ },\n        { message: \"number required.\", regex: /[0-9]+/ },\n      ],\n    };\n  },\n  methods: {\n    CreatePost() {\n      axios\n        .post(\"register\", this.formData)\n        .then((response) => console.log(response))\n        .catch((error) => console.log(error));\n\n      this.$router.push({ name: \"apiLogin\" });\n    },\n  },\n  computed: {\n    notSamePasswords() {\n      if (this.passwordsFilled) {\n        return this.formData.password !== this.formData.confirm_password;\n      } else {\n        return false;\n      }\n    },\n    passwordsFilled() {\n      return (\n        this.formData.password !== \"\" && this.formData.confirm_password !== \"\"\n      );\n    },\n    passwordValidation() {\n      let errors = [];\n      for (let condition of this.rules) {\n        if (!condition.regex.test(this.formData.password)) {\n          errors.push(condition.message);\n        }\n        // return { $router({ name:\"apiLogin\"}) };\n      }\n      if (errors.length === 0) {\n        return { valid: true, errors };\n      } else {\n        return { valid: false, errors };\n      }\n    },\n  },\n};\n</script>\n<style>\n.invalid-feedback {\n  color: red;\n}\n.hints {\n  max-width: 400px;\n  padding: 1em;\n  background: whitesmoke;\n  margin: 1em 0;\n  font-size: 0.9em;\n  color: darken(#d4dedf, 50%);\n  h2 {\n    margin: 0.5em 0 0.2em 0;\n  }\n  p {\n    margin: 0;\n    padding-left: 1em;\n    &::before {\n      content: \">\";\n      font-size: 0.9em;\n      margin-right: 6px;\n      display: inline-block;\n    }\n  }\n}\n</style>\n"]},"metadata":{},"sourceType":"module"}