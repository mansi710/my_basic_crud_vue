{"ast":null,"code":"import axios from \"axios\";\nexport default {\n  data() {\n    return {\n      formData: {\n        // email: \"\",\n        password: \"\",\n        password_confirmation: \"\",\n        message: \"\",\n        submitted: false\n      },\n      rules: [{\n        message: \"8 characters minimum.\",\n        regex: /.{8,}/\n      }, {\n        message: \"number required.\",\n        regex: /[0-9]+/\n      }]\n    };\n  },\n\n  methods: {\n    async resetPassword() {\n      const response = await axios.post(\"http://192.168.1.2:8000/api/reset-password\", {\n        // email: this.formData.email,\n        password: this.formData.password,\n        password_confirmation: this.formData.password_confirmation,\n        token: this.$route.params.token\n      });\n      console.log(response);\n      console.log(this.$route.params.token);\n\n      if (response) {\n        this.formData.message = \"your password updated successfully\";\n        this.$router.push(\"/apiLogin\");\n      }\n    }\n\n  },\n  computed: {\n    notSamePasswords() {\n      if (this.passwordsFilled) {\n        return this.formData.password !== this.formData.password_confirmation;\n      } else {\n        return false;\n      }\n    },\n\n    passwordsFilled() {\n      return this.formData.password !== \"\" && this.formData.confirm_password !== \"\";\n    },\n\n    passwordValidation() {\n      let errors = [];\n\n      for (let condition of this.rules) {\n        if (!condition.regex.test(this.formData.password)) {\n          errors.push(condition.message);\n        } // return { $router({ name:\"apiLogin\"}) };\n\n      }\n\n      if (errors.length === 0) {\n        return {\n          valid: true,\n          errors\n        };\n      } else {\n        return {\n          valid: false,\n          errors\n        };\n      }\n    }\n\n  }\n};","map":{"version":3,"mappings":"AAkDA,OAAOA,KAAP,MAAkB,OAAlB;AACA,eAAe;EACbC,IAAI,GAAG;IACL,OAAO;MACLC,QAAQ,EAAE;QACR;QACAC,QAAQ,EAAE,EAFF;QAGRC,qBAAqB,EAAE,EAHf;QAIRC,OAAO,EAAE,EAJD;QAKRC,SAAS,EAAE;MALH,CADL;MAQLC,KAAK,EAAE,CACL;QAAEF,OAAO,EAAE,uBAAX;QAAoCG,KAAK,EAAE;MAA3C,CADK,EAEL;QAAEH,OAAO,EAAE,kBAAX;QAA+BG,KAAK,EAAE;MAAtC,CAFK;IARF,CAAP;EAaD,CAfY;;EAgBbC,OAAO,EAAE;IACP,MAAMC,aAAN,GAAsB;MACpB,MAAMC,QAAO,GAAI,MAAMX,KAAK,CAACY,IAAN,CACrB,4CADqB,EACyB;QAC9C;QACAT,QAAQ,EAAE,KAAKD,QAAL,CAAcC,QAFsB;QAG9CC,qBAAqB,EAAE,KAAKF,QAAL,CAAcE,qBAHS;QAI9CS,KAAK,EAAE,KAAKC,MAAL,CAAYC,MAAZ,CAAmBF;MAJoB,CADzB,CAAvB;MAOAG,OAAO,CAACC,GAAR,CAAYN,QAAZ;MACAK,OAAO,CAACC,GAAR,CAAY,KAAKH,MAAL,CAAYC,MAAZ,CAAmBF,KAA/B;;MACA,IAAIF,QAAJ,EAAc;QACZ,KAAKT,QAAL,CAAcG,OAAd,GAAwB,oCAAxB;QACA,KAAKa,OAAL,CAAaC,IAAb,CAAkB,WAAlB;MACF;IACD;;EAfM,CAhBI;EAiCbC,QAAQ,EAAE;IACRC,gBAAgB,GAAG;MACjB,IAAI,KAAKC,eAAT,EAA0B;QACxB,OAAO,KAAKpB,QAAL,CAAcC,QAAd,KAA2B,KAAKD,QAAL,CAAcE,qBAAhD;MACF,CAFA,MAEO;QACL,OAAO,KAAP;MACF;IACD,CAPO;;IAQRkB,eAAe,GAAG;MAChB,OACE,KAAKpB,QAAL,CAAcC,QAAd,KAA2B,EAA3B,IAAiC,KAAKD,QAAL,CAAcqB,gBAAd,KAAmC,EADtE;IAGD,CAZO;;IAaRC,kBAAkB,GAAG;MACnB,IAAIC,MAAK,GAAI,EAAb;;MACA,KAAK,IAAIC,SAAT,IAAsB,KAAKnB,KAA3B,EAAkC;QAChC,IAAI,CAACmB,SAAS,CAAClB,KAAV,CAAgBmB,IAAhB,CAAqB,KAAKzB,QAAL,CAAcC,QAAnC,CAAL,EAAmD;UACjDsB,MAAM,CAACN,IAAP,CAAYO,SAAS,CAACrB,OAAtB;QACF,CAHgC,CAIhC;;MACF;;MACA,IAAIoB,MAAM,CAACG,MAAP,KAAkB,CAAtB,EAAyB;QACvB,OAAO;UAAEC,KAAK,EAAE,IAAT;UAAeJ;QAAf,CAAP;MACF,CAFA,MAEO;QACL,OAAO;UAAEI,KAAK,EAAE,KAAT;UAAgBJ;QAAhB,CAAP;MACF;IACD;;EA1BO;AAjCG,CAAf","names":["axios","data","formData","password","password_confirmation","message","submitted","rules","regex","methods","resetPassword","response","post","token","$route","params","console","log","$router","push","computed","notSamePasswords","passwordsFilled","confirm_password","passwordValidation","errors","condition","test","length","valid"],"sourceRoot":"","sources":["/var/www/html/newData/mansi/my-vuejs-final/src/views/ResetPasswordView.vue"],"sourcesContent":["<template>\n  <div>\n    <h1>Reset Password View</h1>\n    <form @submit.prevent=\"resetPassword\">\n      <!-- <div>\n        <label for=\"email\">email</label>\n        <input type=\"email\" id=\"email\" class=\"input\" v-model=\"formData.email\" />\n      </div> -->\n      <div>\n        <label for=\"password\">Password</label>\n        <input\n          type=\"text\"\n          id=\"password\"\n          class=\"input\"\n          v-model=\"formData.password\"\n          :class=\"{ valid: passwordValidation.valid }\"\n        />\n      </div>\n      <div>\n        <label for=\"C_pwd\">Confirm Password</label>\n        <input\n          type=\"text\"\n          id=\"c_password\"\n          class=\"input\"\n          v-model=\"formData.password_confirmation\"\n        />\n      </div>\n      <transition name=\"hint\" appear>\n        <div\n          v-if=\"passwordValidation.errors.length > 0 && !submitted\"\n          class=\"hints\"\n        >\n          <h2>Hints</h2>\n          <p v-for=\"error in passwordValidation.errors\" :key=\"error.id\">\n            {{ error }}\n          </p>\n        </div>\n      </transition>\n      <div class=\"matches\" v-if=\"notSamePasswords\">\n        <p>Passwords don't match.</p>\n      </div>\n      <div>\n        {{ message }}\n      </div>\n      <button class=\"btn\">Set A New Password</button>\n    </form>\n  </div>\n</template>\n\n<script>\nimport axios from \"axios\";\nexport default {\n  data() {\n    return {\n      formData: {\n        // email: \"\",\n        password: \"\",\n        password_confirmation: \"\",\n        message: \"\",\n        submitted: false,\n      },\n      rules: [\n        { message: \"8 characters minimum.\", regex: /.{8,}/ },\n        { message: \"number required.\", regex: /[0-9]+/ },\n      ],\n    };\n  },\n  methods: {\n    async resetPassword() {\n      const response = await axios.post(\n        \"http://192.168.1.2:8000/api/reset-password\", {\n        // email: this.formData.email,\n        password: this.formData.password,\n        password_confirmation: this.formData.password_confirmation,\n        token: this.$route.params.token,\n      });\n      console.log(response);\n      console.log(this.$route.params.token);\n      if (response) {\n        this.formData.message = \"your password updated successfully\";\n        this.$router.push(\"/apiLogin\");\n      }\n    },\n  },\n  computed: {\n    notSamePasswords() {\n      if (this.passwordsFilled) {\n        return this.formData.password !== this.formData.password_confirmation;\n      } else {\n        return false;\n      }\n    },\n    passwordsFilled() {\n      return (\n        this.formData.password !== \"\" && this.formData.confirm_password !== \"\"\n      );\n    },\n    passwordValidation() {\n      let errors = [];\n      for (let condition of this.rules) {\n        if (!condition.regex.test(this.formData.password)) {\n          errors.push(condition.message);\n        }\n        // return { $router({ name:\"apiLogin\"}) };\n      }\n      if (errors.length === 0) {\n        return { valid: true, errors };\n      } else {\n        return { valid: false, errors };\n      }\n    },\n  },\n};\n</script>\n\n<style scoped></style>\n"]},"metadata":{},"sourceType":"module"}