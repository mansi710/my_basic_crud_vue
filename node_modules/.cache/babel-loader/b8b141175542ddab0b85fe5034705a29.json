{"ast":null,"code":"// import { required, minLength, maxLength, sameAs } from \"vuelidate/lib/validators\";\nimport axios from \"axios\";\nexport default {\n  name: \"CreatePost\",\n\n  data() {\n    return {\n      formData: {\n        // userId: \"\",\n        name: \"\",\n        email: \"\",\n        password: \"\",\n        confirm_password: \"\"\n      }\n    };\n  },\n\n  methods: {\n    CreatePost() {\n      axios.post(\"register\", this.formData).then(response => console.log(response)).catch(error => console.log(error));\n      this.$router.push({\n        name: \"apiLogin\"\n      });\n      this.submitted = true;\n      this.$v.touch();\n\n      if (this.$v.invalid) {\n        return false;\n      } else {\n        alert(\"Form Valid. Move to next screen\");\n      }\n    }\n\n  }\n};","map":{"version":3,"mappings":"AA6DA;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,eAAe;EACbC,IAAI,EAAE,YADO;;EAEbC,IAAI,GAAG;IACL,OAAO;MACLC,QAAQ,EAAE;QACR;QACAF,IAAI,EAAE,EAFE;QAGRG,KAAK,EAAE,EAHC;QAIRC,QAAQ,EAAE,EAJF;QAKRC,gBAAgB,EAAE;MALV;IADL,CAAP;EASD,CAZY;;EAcbC,OAAO,EAAE;IACPC,UAAU,GAAG;MACXR,KAAI,CACDS,IADH,CACQ,UADR,EACoB,KAAKN,QADzB,EAEGO,IAFH,CAESC,QAAD,IAAcC,OAAO,CAACC,GAAR,CAAYF,QAAZ,CAFtB,EAGGG,KAHH,CAGUC,KAAD,IAAWH,OAAO,CAACC,GAAR,CAAYE,KAAZ,CAHpB;MAKA,KAAKC,OAAL,CAAaC,IAAb,CAAkB;QAAEhB,IAAI,EAAE;MAAR,CAAlB;MACA,KAAKiB,SAAL,GAAiB,IAAjB;MACA,KAAKC,EAAL,CAAQC,KAAR;;MACA,IAAI,KAAKD,EAAL,CAAQE,OAAZ,EAAqB;QACnB,OAAO,KAAP;MACF,CAFA,MAEO;QACLC,KAAK,CAAC,iCAAD,CAAL;MACF;IACD;;EAfM;AAdI,CAAf","names":["axios","name","data","formData","email","password","confirm_password","methods","CreatePost","post","then","response","console","log","catch","error","$router","push","submitted","$v","touch","invalid","alert"],"sourceRoot":"","sources":["/var/www/html/newData/mansi/my-vuejs-final/src/views/RegisterC.vue"],"sourcesContent":["<template>\n  <div>\n    <form @submit.prevent=\"CreatePost\">\n      <div>\n        <label for=\"name\">User Name</label>\n        <input\n          type=\"text\"\n          id=\"name\"\n          v-model=\"formData.name\"\n          placeholder=\"Enter name\"\n          class=\"input\"\n        />\n      </div>\n      <div>\n        <label for=\"email\">User Email</label>\n        <input\n          type=\"text\"\n          id=\"email\"\n          v-model=\"formData.email\"\n          placeholder=\"Enter Email\"\n          class=\"input\"\n        />\n      </div>\n      <div>\n        <label for=\"password\">password</label>\n        <input\n          type=\"text\"\n          id=\"password\"\n          v-model=\"formData.password\"\n          placeholder=\"Enter Password\"\n          class=\"input\"\n        />\n        <span v-if=\"!$v.user.password.required\">Password is required</span>\n      </div>\n      <div>\n        <label for=\"C_pwd\">Confirm Password</label>\n        <input\n          type=\"text\"\n          id=\"c_password\"\n          v-model=\"formData.confirm_password\"\n          placeholder=\"Enter Confirm Password\"\n          class=\"input\"\n        />\n      </div>\n      <div\n        v-if=\"this.submitted && $v.user.confirmPassword.$error\"\n        class=\"invalid-feedback left\"\n      >\n        <span v-if=\"!$v.user.confirmPassword.required\">\n          Confirm Password is required\n        </span>\n        <span v-if=\"user.confirmPassword && !$v.user.confirmPassword.sameAsPassword\"\n          >Password and Confirm Password should match</span\n        >\n      </div>\n      <button class=\"btn\">Sign Up</button>\n    </form>\n  </div>\n</template>\n\n<script>\n// import { required, minLength, maxLength, sameAs } from \"vuelidate/lib/validators\";\nimport axios from \"axios\";\nexport default {\n  name: \"CreatePost\",\n  data() {\n    return {\n      formData: {\n        // userId: \"\",\n        name: \"\",\n        email: \"\",\n        password: \"\",\n        confirm_password: \"\",\n      },\n    };\n  },\n\n  methods: {\n    CreatePost() {\n      axios\n        .post(\"register\", this.formData)\n        .then((response) => console.log(response))\n        .catch((error) => console.log(error));\n\n      this.$router.push({ name: \"apiLogin\" });\n      this.submitted = true;\n      this.$v.touch();\n      if (this.$v.invalid) {\n        return false;\n      } else {\n        alert(\"Form Valid. Move to next screen\");\n      }\n    },\n  },\n};\n</script>\n<style>\n.invalid-feedback {\n  color: red;\n}\n</style>\n"]},"metadata":{},"sourceType":"module"}