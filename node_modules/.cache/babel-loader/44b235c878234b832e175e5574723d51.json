{"ast":null,"code":"// import { required, minLength, maxLength, sameAs } from \"vuelidate/lib/validators\";\nimport axios from \"axios\";\nexport default {\n  name: \"CreatePost\",\n\n  data() {\n    return {\n      formData: {\n        // userId: \"\",\n        name: \"\",\n        email: \"\",\n        password: \"\",\n        confirm_password: \"\",\n        submitted: false\n      },\n      rules: [{\n        message: \"One lowercase letter required.\",\n        regex: /[a-z]+/\n      }, {\n        message: \"One uppercase letter required.\",\n        regex: /[A-Z]+/\n      }, {\n        message: \"8 characters minimum.\",\n        regex: /.{8,}/\n      }, {\n        message: \"One number required.\",\n        regex: /[0-9]+/\n      }]\n    };\n  },\n\n  methods: {\n    resetPasswords() {\n      this.formData.password = \"\";\n      this.formData.confirm_password = \"\";\n      this.formData.submitted = true;\n      setTimeout(() => {\n        this.formData.submitted = false;\n      }, 2000);\n    },\n\n    CreatePost() {\n      axios.post(\"register\", this.formData).then(response => console.log(response)).catch(error => console.log(error));\n      this.$router.push({\n        name: \"apiLogin\"\n      });\n    }\n\n  },\n  computed: {\n    notSamePasswords() {\n      if (this.passwordsFilled) {\n        return this.formData.password !== this.formData.confirm_password;\n      } else {\n        return false;\n      }\n    },\n\n    passwordsFilled() {\n      return this.formData.password !== \"\" && this.formData.confirm_password !== \"\";\n    },\n\n    passwordValidation() {\n      let errors = [];\n\n      for (let condition of this.rules) {\n        if (!condition.regex.test(this.formData.password)) {\n          errors.push(condition.message);\n        }\n      }\n\n      if (errors.length === 0) {\n        return {\n          valid: true,\n          errors\n        };\n      } else {\n        return {\n          valid: false,\n          errors\n        };\n      }\n    }\n\n  }\n};","map":{"version":3,"mappings":"AAsDA;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,eAAe;EACbC,IAAI,EAAE,YADO;;EAEbC,IAAI,GAAG;IACL,OAAO;MACLC,QAAQ,EAAE;QACR;QACAF,IAAI,EAAE,EAFE;QAGRG,KAAK,EAAE,EAHC;QAIRC,QAAQ,EAAE,EAJF;QAKRC,gBAAgB,EAAE,EALV;QAMRC,SAAS,EAAE;MANH,CADL;MASLC,KAAK,EAAE,CACL;QAAEC,OAAO,EAAE,gCAAX;QAA6CC,KAAK,EAAE;MAApD,CADK,EAEL;QAAED,OAAO,EAAE,gCAAX;QAA6CC,KAAK,EAAE;MAApD,CAFK,EAGL;QAAED,OAAO,EAAE,uBAAX;QAAoCC,KAAK,EAAE;MAA3C,CAHK,EAIL;QAAED,OAAO,EAAE,sBAAX;QAAmCC,KAAK,EAAE;MAA1C,CAJK;IATF,CAAP;EAgBD,CAnBY;;EAoBbC,OAAO,EAAE;IACPC,cAAc,GAAG;MACf,KAAKT,QAAL,CAAcE,QAAd,GAAyB,EAAzB;MACA,KAAKF,QAAL,CAAcG,gBAAd,GAAiC,EAAjC;MACA,KAAKH,QAAL,CAAcI,SAAd,GAA0B,IAA1B;MACAM,UAAU,CAAC,MAAM;QACf,KAAKV,QAAL,CAAcI,SAAd,GAA0B,KAA1B;MACD,CAFS,EAEP,IAFO,CAAV;IAGD,CARM;;IASPO,UAAU,GAAG;MACXd,KAAI,CACDe,IADH,CACQ,UADR,EACoB,KAAKZ,QADzB,EAEGa,IAFH,CAESC,QAAD,IAAcC,OAAO,CAACC,GAAR,CAAYF,QAAZ,CAFtB,EAGGG,KAHH,CAGUC,KAAD,IAAWH,OAAO,CAACC,GAAR,CAAYE,KAAZ,CAHpB;MAKA,KAAKC,OAAL,CAAaC,IAAb,CAAkB;QAAEtB,IAAI,EAAE;MAAR,CAAlB;IACD;;EAhBM,CApBI;EAsCbuB,QAAQ,EAAE;IACRC,gBAAgB,GAAG;MACjB,IAAI,KAAKC,eAAT,EAA0B;QACxB,OAAO,KAAKvB,QAAL,CAAcE,QAAd,KAA2B,KAAKF,QAAL,CAAcG,gBAAhD;MACF,CAFA,MAEO;QACL,OAAO,KAAP;MACF;IACD,CAPO;;IAQRoB,eAAe,GAAG;MAChB,OACE,KAAKvB,QAAL,CAAcE,QAAd,KAA2B,EAA3B,IAAiC,KAAKF,QAAL,CAAcG,gBAAd,KAAmC,EADtE;IAGD,CAZO;;IAaRqB,kBAAkB,GAAG;MACnB,IAAIC,MAAK,GAAI,EAAb;;MACA,KAAK,IAAIC,SAAT,IAAsB,KAAKrB,KAA3B,EAAkC;QAChC,IAAI,CAACqB,SAAS,CAACnB,KAAV,CAAgBoB,IAAhB,CAAqB,KAAK3B,QAAL,CAAcE,QAAnC,CAAL,EAAmD;UACjDuB,MAAM,CAACL,IAAP,CAAYM,SAAS,CAACpB,OAAtB;QACF;MACF;;MACA,IAAImB,MAAM,CAACG,MAAP,KAAkB,CAAtB,EAAyB;QACvB,OAAO;UAAEC,KAAK,EAAE,IAAT;UAAeJ;QAAf,CAAP;MACF,CAFA,MAEO;QACL,OAAO;UAAEI,KAAK,EAAE,KAAT;UAAgBJ;QAAhB,CAAP;MACF;IACD;;EAzBO;AAtCG,CAAf","names":["axios","name","data","formData","email","password","confirm_password","submitted","rules","message","regex","methods","resetPasswords","setTimeout","CreatePost","post","then","response","console","log","catch","error","$router","push","computed","notSamePasswords","passwordsFilled","passwordValidation","errors","condition","test","length","valid"],"sourceRoot":"","sources":["/var/www/html/newData/mansi/my-vuejs-final/src/views/RegisterC.vue"],"sourcesContent":["<template>\n  <div>\n    <form @submit.prevent=\"CreatePost\">\n      <div>\n        <label for=\"name\">User Name</label>\n        <input\n          type=\"text\"\n          id=\"name\"\n          v-model=\"formData.name\"\n          placeholder=\"Enter name\"\n          class=\"input\"\n          required\n        />\n      </div>\n      <div>\n        <label for=\"email\">User Email</label>\n        <input\n          type=\"text\"\n          id=\"email\"\n          v-model=\"formData.email\"\n          placeholder=\"Enter Email\"\n          class=\"input\"\n          required\n        />\n      </div>\n      <div>\n        <label for=\"password\">password</label>\n        <input\n          type=\"text\"\n          id=\"password\"\n          v-model=\"formData.password\"\n          placeholder=\"Enter Password\"\n          :class=\n           '{valid:passwordValidation.valid}' :type=\"passwordVisible ? 'text' : 'password'\"\n          required\n        />\n      </div>\n      <div>\n        <label for=\"C_pwd\">Confirm Password</label>\n        <input\n          type=\"text\"\n          id=\"c_password\"\n          v-model=\"formData.confirm_password\"\n          placeholder=\"Enter Confirm Password\"\n          class=\"input\"\n          required\n        />\n      </div>\n      <button class=\"btn\">Sign Up</button>\n    </form>\n  </div>\n</template>\n\n<script>\n// import { required, minLength, maxLength, sameAs } from \"vuelidate/lib/validators\";\nimport axios from \"axios\";\nexport default {\n  name: \"CreatePost\",\n  data() {\n    return {\n      formData: {\n        // userId: \"\",\n        name: \"\",\n        email: \"\",\n        password: \"\",\n        confirm_password: \"\",\n        submitted: false,\n      },\n      rules: [\n        { message: \"One lowercase letter required.\", regex: /[a-z]+/ },\n        { message: \"One uppercase letter required.\", regex: /[A-Z]+/ },\n        { message: \"8 characters minimum.\", regex: /.{8,}/ },\n        { message: \"One number required.\", regex: /[0-9]+/ },\n      ],\n    };\n  },\n  methods: {\n    resetPasswords() {\n      this.formData.password = \"\";\n      this.formData.confirm_password = \"\";\n      this.formData.submitted = true;\n      setTimeout(() => {\n        this.formData.submitted = false;\n      }, 2000);\n    },\n    CreatePost() {\n      axios\n        .post(\"register\", this.formData)\n        .then((response) => console.log(response))\n        .catch((error) => console.log(error));\n\n      this.$router.push({ name: \"apiLogin\" });\n    },\n  },\n  computed: {\n    notSamePasswords() {\n      if (this.passwordsFilled) {\n        return this.formData.password !== this.formData.confirm_password;\n      } else {\n        return false;\n      }\n    },\n    passwordsFilled() {\n      return (\n        this.formData.password !== \"\" && this.formData.confirm_password !== \"\"\n      );\n    },\n    passwordValidation() {\n      let errors = [];\n      for (let condition of this.rules) {\n        if (!condition.regex.test(this.formData.password)) {\n          errors.push(condition.message);\n        }\n      }\n      if (errors.length === 0) {\n        return { valid: true, errors };\n      } else {\n        return { valid: false, errors };\n      }\n    },\n  },\n};\n</script>\n<style>\n.invalid-feedback {\n  color: red;\n}\n</style>\n"]},"metadata":{},"sourceType":"module"}