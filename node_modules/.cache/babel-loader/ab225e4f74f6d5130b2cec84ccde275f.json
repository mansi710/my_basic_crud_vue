{"ast":null,"code":"import { createElementVNode as _createElementVNode, vModelText as _vModelText, withDirectives as _withDirectives, normalizeClass as _normalizeClass, withModifiers as _withModifiers, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\n\nconst _hoisted_1 = /*#__PURE__*/_createElementVNode(\"h1\", null, \"Reset Password View\", -1\n/* HOISTED */\n);\n\nconst _hoisted_2 = /*#__PURE__*/_createElementVNode(\"label\", {\n  for: \"email\"\n}, \"email\", -1\n/* HOISTED */\n);\n\nconst _hoisted_3 = /*#__PURE__*/_createElementVNode(\"label\", {\n  for: \"password\"\n}, \"Password\", -1\n/* HOISTED */\n);\n\nconst _hoisted_4 = /*#__PURE__*/_createElementVNode(\"label\", {\n  for: \"C_pwd\"\n}, \"Confirm Password\", -1\n/* HOISTED */\n);\n\nconst _hoisted_5 = /*#__PURE__*/_createElementVNode(\"button\", {\n  class: \"btn\"\n}, \"Set A New Password\", -1\n/* HOISTED */\n);\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", null, [_hoisted_1, _createElementVNode(\"form\", {\n    onSubmit: _cache[3] || (_cache[3] = _withModifiers((...args) => $options.resetPassword && $options.resetPassword(...args), [\"prevent\"]))\n  }, [_createElementVNode(\"div\", null, [_hoisted_2, _withDirectives(_createElementVNode(\"input\", {\n    type: \"email\",\n    id: \"email\",\n    class: \"input\",\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $data.email = $event)\n  }, null, 512\n  /* NEED_PATCH */\n  ), [[_vModelText, $data.email]])]), _createElementVNode(\"div\", null, [_hoisted_3, _withDirectives(_createElementVNode(\"input\", {\n    type: \"text\",\n    id: \"password\",\n    class: _normalizeClass([\"input\", {\n      valid: $options.passwordValidation.valid\n    }]),\n    \"onUpdate:modelValue\": _cache[1] || (_cache[1] = $event => $data.password = $event)\n  }, null, 2\n  /* CLASS */\n  ), [[_vModelText, $data.password]])]), _createElementVNode(\"div\", null, [_hoisted_4, _withDirectives(_createElementVNode(\"input\", {\n    type: \"text\",\n    id: \"c_password\",\n    class: \"input\",\n    \"onUpdate:modelValue\": _cache[2] || (_cache[2] = $event => $data.password_confirmation = $event)\n  }, null, 512\n  /* NEED_PATCH */\n  ), [[_vModelText, $data.password_confirmation]])]), _hoisted_5], 32\n  /* HYDRATE_EVENTS */\n  )]);\n}","map":{"version":3,"mappings":";;gCAEIA,oBAA4B,IAA5B,EAA4B,IAA5B,EAAI,qBAAJ,EAAuB;AAAA;AAAvB;;gCAGIA,oBAAgC,OAAhC,EAAgC;EAAzBC,GAAG,EAAC;AAAqB,CAAhC,EAAmB,OAAnB,EAAwB;AAAA;AAAxB;;gCAIAD,oBAAsC,OAAtC,EAAsC;EAA/BC,GAAG,EAAC;AAA2B,CAAtC,EAAsB,UAAtB,EAA8B;AAAA;AAA9B;;gCAKAD,oBAA2C,OAA3C,EAA2C;EAApCC,GAAG,EAAC;AAAgC,CAA3C,EAAmB,kBAAnB,EAAmC;AAAA;AAAnC;;gCAQFD,oBAA+C,QAA/C,EAA+C;EAAvCE,KAAK,EAAC;AAAiC,CAA/C,EAAoB,oBAApB,EAAsC;AAAA;AAAtC;;;uBArBJC,oBAuBM,KAvBN,EAuBM,IAvBN,EAuBM,CAtBJC,UAsBI,EArBJJ,oBAoBO,MApBP,EAoBO;IApBAK,QAAM,wDAAUC,yDAAV,EAAuB,WAAvB;EAoBN,CApBP,GACEN,oBAGM,KAHN,EAGM,IAHN,EAGM,CAFJO,UAEI,kBADJP,oBAA+D,OAA/D,EAA+D;IAAxDQ,IAAI,EAAC,OAAmD;IAA3CC,EAAE,EAAC,OAAwC;IAAhCP,KAAK,EAAC,OAA0B;+DAATQ,cAAKC;EAAI,CAA/D;;EAAA,kBAAsDD,cAClD,CAHN,GAIAV,oBAIM,KAJN,EAIM,IAJN,EAIM,CAHJY,UAGI,kBAFJZ,oBAC0G,OAD1G,EAC0G;IAA1GQ,IAAI,EAAC,MAAqG;IAA9FC,EAAE,EAAC,UAA2F;IAAhFP,KAAK,mBAAC,OAAD,EAAQ;MAAAW,OAAqCP,4BAAmBO;IAAxD,CAAR,EAA2E;+DAAzDH,iBAAQC;EAAiD,CAD1G;;EAAA,kBACiDD,iBAC7C,CAJN,GAKAV,oBAQM,KARN,EAQM,IARN,EAQM,CAPJc,UAOI,kBANJd,oBAKE,OALF,EAKE;IAJAQ,IAAI,EAAC,MAIL;IAHAC,EAAE,EAAC,YAGH;IAFAP,KAAK,EAAC,OAEN;+DADSQ,8BAAqBC;EAC9B,CALF;;EAAA,kBAIWD,8BAEP,CARN,GASAK,WAnBF;;EAAA,CAqBI,CAvBN","names":["_createElementVNode","for","class","_createElementBlock","_hoisted_1","onSubmit","$options","_hoisted_2","type","id","$data","$event","_hoisted_3","valid","_hoisted_4","_hoisted_5"],"sourceRoot":"","sources":["/var/www/html/newData/mansi/my-vuejs-final/src/views/ResetPasswordView.vue"],"sourcesContent":["<template>\n  <div>\n    <h1>Reset Password View</h1>\n    <form @submit.prevent=\"resetPassword\">\n      <div>\n        <label for=\"email\">email</label>\n        <input type=\"email\" id=\"email\" class=\"input\" v-model=\"email\" />\n      </div>\n      <div>\n        <label for=\"password\">Password</label>\n        <input\n        type=\"text\" id=\"password\" class=\"input\" v-model=\"password\" :class=\"{ valid: passwordValidation.valid }\" />\n      </div>\n      <div>\n        <label for=\"C_pwd\">Confirm Password</label>\n        <input\n          type=\"text\"\n          id=\"c_password\"\n          class=\"input\"\n          v-model=\"password_confirmation\"\n        />\n      </div>\n      <button class=\"btn\">Set A New Password</button>\n    </form>\n  </div>\n</template>\n\n<script>\nimport axios from \"axios\";\nexport default {\n  data() {\n    return {\n      email: \"\",\n      password: \"\",\n      password_confirmation: \"\",\n      submitted: false,\n    };\n  },\n  methods: {\n    async resetPassword() {\n      const response = await axios.post(\"reset-password\", {\n        email: this.email,\n        password: this.password,\n        password_confirmation: this.password_confirmation,\n        token: this.$route.params.token,\n      });\n      console.log(response);\n      console.log(this.$route.params.token);\n      this.$router.push(\"/apiLogin\");\n    },\n  },\n  computed: {\n    notSamePasswords() {\n      if (this.passwordsFilled) {\n        return this.formData.password !== this.formData.confirm_password;\n      } else {\n        return false;\n      }\n    },\n    passwordsFilled() {\n      return (\n        this.formData.password !== \"\" && this.formData.confirm_password !== \"\"\n      );\n    },\n    passwordValidation() {\n      let errors = [];\n      for (let condition of this.rules) {\n        if (!condition.regex.test(this.formData.password)) {\n          errors.push(condition.message);\n        }\n        // return { $router({ name:\"apiLogin\"}) };\n      }\n      if (errors.length === 0) {\n        return { valid: true, errors };\n      } else {\n        return { valid: false, errors };\n      }\n    },\n  },\n};\n</script>\n\n<style scoped></style>\n"]},"metadata":{},"sourceType":"module"}