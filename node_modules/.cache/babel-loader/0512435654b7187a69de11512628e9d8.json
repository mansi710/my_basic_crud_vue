{"ast":null,"code":"import { required, minLength, maxLength, sameAs } from \"vuelidate/lib/validators\";\nimport axios from \"axios\";\nexport default {\n  name: \"CreatePost\",\n\n  data() {\n    return {\n      formData: {\n        // userId: \"\",\n        name: \"\",\n        email: \"\",\n        password: \"\",\n        confirm_password: \"\"\n      },\n      submitted: false\n    };\n  },\n\n  validations: {\n    user: {\n      password: {\n        required,\n        valid: function (value) {\n          const containsUppercase = /[A-Z]/.test(value);\n          const containsLowercase = /[a-z]/.test(value);\n          const containsNumber = /[0-9]/.test(value);\n          const containsSpecial = /[#?!@$%^&*-]/.test(value);\n          return containsUppercase && containsLowercase && containsNumber && containsSpecial;\n        },\n        minLength: minLength(9),\n        maxLength: maxLength(19)\n      },\n      confirmPassword: {\n        required,\n        sameAsPassword: sameAs(\"password\")\n      }\n    }\n  },\n\n  created() {\n    this.submitted = true;\n    return this.$v.$touch();\n  },\n\n  methods: {\n    CreatePost() {\n      axios.post(\"register\", this.formData).then(response => console.log(response)).catch(error => console.log(error));\n      this.$router.push({\n        name: \"apiLogin\"\n      });\n      this.submitted = true;\n      this.$v.touch();\n\n      if (this.$v.invalid) {\n        return false;\n      } else {\n        alert(\"Form Valid. Move to next screen\");\n      }\n    }\n\n  }\n};","map":{"version":3,"mappings":"AA4DA,SAASA,QAAT,EAAmBC,SAAnB,EAA8BC,SAA9B,EAAyCC,MAAzC,QAAuD,0BAAvD;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,eAAe;EACbC,IAAI,EAAE,YADO;;EAEbC,IAAI,GAAG;IACL,OAAO;MACLC,QAAQ,EAAE;QACR;QACAF,IAAI,EAAE,EAFE;QAGRG,KAAK,EAAE,EAHC;QAIRC,QAAQ,EAAE,EAJF;QAKRC,gBAAgB,EAAE;MALV,CADL;MAQLC,SAAS,EAAE;IARN,CAAP;EAUD,CAbY;;EAcbC,WAAW,EAAE;IACXC,IAAI,EAAE;MACJJ,QAAQ,EAAE;QACRT,QADQ;QAERc,KAAK,EAAE,UAAUC,KAAV,EAAiB;UACtB,MAAMC,iBAAgB,GAAI,QAAQC,IAAR,CAAaF,KAAb,CAA1B;UACA,MAAMG,iBAAgB,GAAI,QAAQD,IAAR,CAAaF,KAAb,CAA1B;UACA,MAAMI,cAAa,GAAI,QAAQF,IAAR,CAAaF,KAAb,CAAvB;UACA,MAAMK,eAAc,GAAI,eAAeH,IAAf,CAAoBF,KAApB,CAAxB;UACA,OACEC,iBAAgB,IAAKE,iBAArB,IAA0CC,cAA1C,IAA4DC,eAD9D;QAGD,CAVO;QAWRnB,SAAS,EAAEA,SAAS,CAAC,CAAD,CAXZ;QAYRC,SAAS,EAAEA,SAAS,CAAC,EAAD;MAZZ,CADN;MAeJmB,eAAe,EAAE;QAAErB,QAAF;QAAYsB,cAAc,EAAEnB,MAAM,CAAC,UAAD;MAAlC;IAfb;EADK,CAdA;;EAiCboB,OAAO,GAAG;IACR,KAAKZ,SAAL,GAAiB,IAAjB;IACA,OAAO,KAAKa,EAAL,CAAQC,MAAR,EAAP;EACD,CApCY;;EAqCbC,OAAO,EAAE;IACPC,UAAU,GAAG;MACXvB,KAAI,CACDwB,IADH,CACQ,UADR,EACoB,KAAKrB,QADzB,EAEGsB,IAFH,CAESC,QAAD,IAAcC,OAAO,CAACC,GAAR,CAAYF,QAAZ,CAFtB,EAGGG,KAHH,CAGUC,KAAD,IAAWH,OAAO,CAACC,GAAR,CAAYE,KAAZ,CAHpB;MAKA,KAAKC,OAAL,CAAaC,IAAb,CAAkB;QAAE/B,IAAI,EAAE;MAAR,CAAlB;MACA,KAAKM,SAAL,GAAiB,IAAjB;MACA,KAAKa,EAAL,CAAQa,KAAR;;MACA,IAAI,KAAKb,EAAL,CAAQc,OAAZ,EAAqB;QACnB,OAAO,KAAP;MACF,CAFA,MAEO;QACLC,KAAK,CAAC,iCAAD,CAAL;MACF;IACD;;EAfM;AArCI,CAAf","names":["required","minLength","maxLength","sameAs","axios","name","data","formData","email","password","confirm_password","submitted","validations","user","valid","value","containsUppercase","test","containsLowercase","containsNumber","containsSpecial","confirmPassword","sameAsPassword","created","$v","$touch","methods","CreatePost","post","then","response","console","log","catch","error","$router","push","touch","invalid","alert"],"sourceRoot":"","sources":["/var/www/html/newData/mansi/my-vuejs-final/src/views/RegisterC.vue"],"sourcesContent":["<template>\n  <div>\n    <form @submit.prevent=\"CreatePost\">\n      <div>\n        <label for=\"name\">User Name</label>\n        <input\n          type=\"text\"\n          id=\"name\"\n          v-model=\"formData.name\"\n          placeholder=\"Enter name\"\n          class=\"input\"\n        />\n      </div>\n      <div>\n        <label for=\"email\">User Email</label>\n        <input\n          type=\"text\"\n          id=\"email\"\n          v-model=\"formData.email\"\n          placeholder=\"Enter Email\"\n          class=\"input\"\n        />\n      </div>\n      <div>\n        <label for=\"password\">password</label>\n        <input\n          type=\"text\"\n          id=\"password\"\n          v-model=\"formData.password\"\n          placeholder=\"Enter Password\"\n          class=\"input\"\n        />\n        <span v-if=\"!$v.formData.password.required\">Password is required</span>\n      </div>\n      <div>\n        <label for=\"C_pwd\">Confirm Password</label>\n        <input\n          type=\"text\"\n          id=\"c_password\"\n          v-model=\"formData.confirm_password\"\n          placeholder=\"Enter Confirm Password\"\n          class=\"input\"\n        />\n      </div>\n      <div\n        v-if=\"this.submitted && $v.user.confirmPassword.$error\"\n        class=\"invalid-feedback left\"\n      >\n        <span v-if=\"!$v.user.confirmPassword.required\">\n          Confirm Password is required</span>\n        <span v-if=\"user.confirmPassword && !$v.user.confirmPassword.sameAsPassword\"\n          >Password and Confirm Password should match</span\n        >\n      </div>\n      <button class=\"btn\">Sign Up</button>\n    </form>\n  </div>\n</template>\n\n<script>\nimport { required, minLength, maxLength, sameAs } from \"vuelidate/lib/validators\";\nimport axios from \"axios\";\nexport default {\n  name: \"CreatePost\",\n  data() {\n    return {\n      formData: {\n        // userId: \"\",\n        name: \"\",\n        email: \"\",\n        password: \"\",\n        confirm_password: \"\",\n      },\n      submitted: false,\n    };\n  },\n  validations: {\n    user: {\n      password: {\n        required,\n        valid: function (value) {\n          const containsUppercase = /[A-Z]/.test(value);\n          const containsLowercase = /[a-z]/.test(value);\n          const containsNumber = /[0-9]/.test(value);\n          const containsSpecial = /[#?!@$%^&*-]/.test(value);\n          return (\n            containsUppercase && containsLowercase && containsNumber && containsSpecial\n          );\n        },\n        minLength: minLength(9),\n        maxLength: maxLength(19),\n      },\n      confirmPassword: { required, sameAsPassword: sameAs(\"password\") },\n    },\n  },\n  created() {\n    this.submitted = true;\n    return this.$v.$touch();\n  },\n  methods: {\n    CreatePost() {\n      axios\n        .post(\"register\", this.formData)\n        .then((response) => console.log(response))\n        .catch((error) => console.log(error));\n\n      this.$router.push({ name: \"apiLogin\" });\n      this.submitted = true;\n      this.$v.touch();\n      if (this.$v.invalid) {\n        return false;\n      } else {\n        alert(\"Form Valid. Move to next screen\");\n      }\n    },\n  },\n};\n</script>\n<style>\n.invalid-feedback {\n  color: red;\n}\n</style>\n"]},"metadata":{},"sourceType":"module"}