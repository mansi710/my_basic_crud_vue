{"ast":null,"code":"import axios from \"axios\";\nexport default {\n  data() {\n    return {\n      email: \"\",\n      password: \"\",\n      password_confirmation: \"\",\n      submitted: false\n    };\n  },\n\n  methods: {\n    async resetPassword() {\n      const response = await axios.post(\"reset-password\", {\n        email: this.email,\n        password: this.password,\n        password_confirmation: this.password_confirmation,\n        token: this.$route.params.token\n      });\n\n      if (response) {\n        // console.log(response);\n        this.message = \"your password will be rest after sometime\"; // alert(\"your password will be rest after sometime\");\n      }\n\n      console.log(response);\n      console.log(this.$route.params.token);\n      this.$router.push(\"/apiLogin\");\n    }\n\n  },\n  computed: {\n    notSamePasswords() {\n      if (this.passwordsFilled) {\n        return this.formData.password !== this.formData.confirm_password;\n      } else {\n        return false;\n      }\n    },\n\n    passwordsFilled() {\n      return this.formData.password !== \"\" && this.formData.confirm_password !== \"\";\n    },\n\n    passwordValidation() {\n      let errors = [];\n\n      for (let condition of this.rules) {\n        if (!condition.regex.test(this.formData.password)) {\n          errors.push(condition.message);\n        } // return { $router({ name:\"apiLogin\"}) };\n\n      }\n\n      if (errors.length === 0) {\n        return {\n          valid: true,\n          errors\n        };\n      } else {\n        return {\n          valid: false,\n          errors\n        };\n      }\n    }\n\n  }\n};","map":{"version":3,"mappings":"AA+CA,OAAOA,KAAP,MAAkB,OAAlB;AACA,eAAe;EACbC,IAAI,GAAG;IACL,OAAO;MACLC,KAAK,EAAE,EADF;MAELC,QAAQ,EAAE,EAFL;MAGLC,qBAAqB,EAAE,EAHlB;MAILC,SAAS,EAAE;IAJN,CAAP;EAMD,CARY;;EASbC,OAAO,EAAE;IACP,MAAMC,aAAN,GAAsB;MACpB,MAAMC,QAAO,GAAI,MAAMR,KAAK,CAACS,IAAN,CAAW,gBAAX,EAA6B;QAClDP,KAAK,EAAE,KAAKA,KADsC;QAElDC,QAAQ,EAAE,KAAKA,QAFmC;QAGlDC,qBAAqB,EAAE,KAAKA,qBAHsB;QAIlDM,KAAK,EAAE,KAAKC,MAAL,CAAYC,MAAZ,CAAmBF;MAJwB,CAA7B,CAAvB;;MAMC,IAAIF,QAAJ,EAAc;QACb;QACA,KAAKK,OAAL,GAAe,2CAAf,CAFa,CAGb;MACF;;MACAC,OAAO,CAACC,GAAR,CAAYP,QAAZ;MACAM,OAAO,CAACC,GAAR,CAAY,KAAKJ,MAAL,CAAYC,MAAZ,CAAmBF,KAA/B;MACA,KAAKM,OAAL,CAAaC,IAAb,CAAkB,WAAlB;IACD;;EAhBM,CATI;EA2BbC,QAAQ,EAAE;IACRC,gBAAgB,GAAG;MACjB,IAAI,KAAKC,eAAT,EAA0B;QACxB,OAAO,KAAKC,QAAL,CAAclB,QAAd,KAA2B,KAAKkB,QAAL,CAAcC,gBAAhD;MACF,CAFA,MAEO;QACL,OAAO,KAAP;MACF;IACD,CAPO;;IAQRF,eAAe,GAAG;MAChB,OACE,KAAKC,QAAL,CAAclB,QAAd,KAA2B,EAA3B,IAAiC,KAAKkB,QAAL,CAAcC,gBAAd,KAAmC,EADtE;IAGD,CAZO;;IAaRC,kBAAkB,GAAG;MACnB,IAAIC,MAAK,GAAI,EAAb;;MACA,KAAK,IAAIC,SAAT,IAAsB,KAAKC,KAA3B,EAAkC;QAChC,IAAI,CAACD,SAAS,CAACE,KAAV,CAAgBC,IAAhB,CAAqB,KAAKP,QAAL,CAAclB,QAAnC,CAAL,EAAmD;UACjDqB,MAAM,CAACP,IAAP,CAAYQ,SAAS,CAACZ,OAAtB;QACF,CAHgC,CAIhC;;MACF;;MACA,IAAIW,MAAM,CAACK,MAAP,KAAkB,CAAtB,EAAyB;QACvB,OAAO;UAAEC,KAAK,EAAE,IAAT;UAAeN;QAAf,CAAP;MACF,CAFA,MAEO;QACL,OAAO;UAAEM,KAAK,EAAE,KAAT;UAAgBN;QAAhB,CAAP;MACF;IACD;;EA1BO;AA3BG,CAAf","names":["axios","data","email","password","password_confirmation","submitted","methods","resetPassword","response","post","token","$route","params","message","console","log","$router","push","computed","notSamePasswords","passwordsFilled","formData","confirm_password","passwordValidation","errors","condition","rules","regex","test","length","valid"],"sourceRoot":"","sources":["/var/www/html/newData/mansi/my-vuejs-final/src/views/ResetPasswordView.vue"],"sourcesContent":["<template>\n  <div>\n    <h1>Reset Password View</h1>\n    <form @submit.prevent=\"resetPassword\">\n      <div>\n        <label for=\"email\">email</label>\n        <input type=\"email\" id=\"email\" class=\"input\" v-model=\"email\" />\n      </div>\n      <div>\n        <label for=\"password\">Password</label>\n        <input\n          type=\"text\"\n          id=\"password\"\n          class=\"input\"\n          v-model=\"password\"\n          :class=\"{ valid: passwordValidation.valid }\"\n        />\n      </div>\n      <div>\n        <label for=\"C_pwd\">Confirm Password</label>\n        <input\n          type=\"text\"\n          id=\"c_password\"\n          class=\"input\"\n          v-model=\"password_confirmation\"\n        />\n      </div>\n      <transition name=\"hint\" appear>\n        <div\n          v-if=\"passwordValidation.errors.length > 0 && !submitted\"\n          class=\"hints\"\n        >\n          <h2>Hints</h2>\n          <p v-for=\"error in passwordValidation.errors\" :key=\"error.id\">\n            {{ error }}\n          </p>\n        </div>\n      </transition>\n      <div class=\"matches\" v-if=\"notSamePasswords\">\n        <p>Passwords don't match.</p>\n      </div>\n      <button class=\"btn\">Set A New Password</button>\n    </form>\n  </div>\n</template>\n\n<script>\nimport axios from \"axios\";\nexport default {\n  data() {\n    return {\n      email: \"\",\n      password: \"\",\n      password_confirmation: \"\",\n      submitted: false,\n    };\n  },\n  methods: {\n    async resetPassword() {\n      const response = await axios.post(\"reset-password\", {\n        email: this.email,\n        password: this.password,\n        password_confirmation: this.password_confirmation,\n        token: this.$route.params.token,\n      });\n       if (response) {\n        // console.log(response);\n        this.message = \"your password will be rest after sometime\";\n        // alert(\"your password will be rest after sometime\");\n      }\n      console.log(response);\n      console.log(this.$route.params.token);\n      this.$router.push(\"/apiLogin\");\n    },\n  },\n  computed: {\n    notSamePasswords() {\n      if (this.passwordsFilled) {\n        return this.formData.password !== this.formData.confirm_password;\n      } else {\n        return false;\n      }\n    },\n    passwordsFilled() {\n      return (\n        this.formData.password !== \"\" && this.formData.confirm_password !== \"\"\n      );\n    },\n    passwordValidation() {\n      let errors = [];\n      for (let condition of this.rules) {\n        if (!condition.regex.test(this.formData.password)) {\n          errors.push(condition.message);\n        }\n        // return { $router({ name:\"apiLogin\"}) };\n      }\n      if (errors.length === 0) {\n        return { valid: true, errors };\n      } else {\n        return { valid: false, errors };\n      }\n    },\n  },\n};\n</script>\n<style>\n.invalid-feedback {\n  color: red;\n}\n.hints {\n  max-width: 400px;\n  padding: 1em;\n  background: whitesmoke;\n  margin: 1em 0;\n  font-size: 0.9em;\n  color: darken(#d4dedf, 50%);\n  h2 {\n    margin: 0.5em 0 0.2em 0;\n  }\n  p {\n    margin: 0;\n    padding-left: 1em;\n    &::before {\n      content: \">\";\n      font-size: 0.9em;\n      margin-right: 6px;\n      display: inline-block;\n    }\n  }\n}\n</style>\n"]},"metadata":{},"sourceType":"module"}