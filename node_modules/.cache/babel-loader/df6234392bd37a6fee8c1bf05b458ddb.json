{"ast":null,"code":"import axios from \"axios\"; // import LaravelVuePagination from \"laravel-vue-pagination\";\n// import NewPagination from \"@/components/NewPagination.vue\";\n\nexport default {\n  name: \"ListOfBlog\",\n\n  // components: { NewPagination },\n  // components: { LaravelVuePagination },\n  data() {\n    return {\n      blogs: [],\n      page: 1,\n      perPage: 3,\n      pages: []\n    };\n  },\n\n  mounted() {\n    this.getBlogs();\n  },\n\n  methods: {\n    async getBlogs() {\n      await axios.get(\"/getAllBlog?page=\" + this.perPage, this.blogs).then(response => {\n        // this.blogs = response.data;\n        this.blogs = response.data;\n      }).catch(error => {\n        console.log(error);\n        console.log(\"handle server error from here\");\n        this.blogs = [];\n      });\n    },\n\n    setPages() {\n      let numberOfPages = Math.ceil(this.blogs.length / this.perPage);\n\n      for (let index = 1; index <= numberOfPages; index++) {\n        this.pages.push(index);\n      }\n    },\n\n    paginate(blogs) {\n      let page = this.page;\n      let perPage = this.perPage;\n      let from = page * perPage - perPage;\n      let to = page * perPage;\n      return blogs.slice(from, to);\n    },\n\n    async deleteBlog(id) {\n      if (confirm(\"Are you sure to delete this category ?\")) {\n        await axios.post(`destroyBlog/${id}`).then(response => {\n          this.getBlogs();\n\n          if (response) {\n            alert(\"blog deleted sucessfully\");\n          }\n        }).catch(error => {\n          console.log(error);\n        });\n      }\n    }\n\n  },\n  watch: {\n    blogs() {\n      this.setPages();\n    }\n\n  },\n  computed: {\n    displayedBlogs() {\n      return this.paginate(this.blogs);\n    }\n\n  }\n};","map":{"version":3,"mappings":"AAoGA,OAAOA,KAAP,MAAkB,OAAlB,C,CACA;AACA;;AACA,eAAe;EACbC,IAAI,EAAE,YADO;;EAEb;EACA;EACAC,IAAI,GAAG;IACL,OAAO;MACLC,KAAK,EAAE,EADF;MAELC,IAAI,EAAE,CAFD;MAGLC,OAAO,EAAE,CAHJ;MAILC,KAAK,EAAE;IAJF,CAAP;EAMD,CAXY;;EAYbC,OAAO,GAAG;IACR,KAAKC,QAAL;EACD,CAdY;;EAebC,OAAO,EAAE;IACP,MAAMD,QAAN,GAAiB;MACf,MAAMR,KAAI,CACPU,GADG,CACC,sBAAsB,KAAKL,OAD5B,EACqC,KAAKF,KAD1C,EAEHQ,IAFG,CAEGC,QAAD,IAAc;QAClB;QACA,KAAKT,KAAL,GAAaS,QAAQ,CAACV,IAAtB;MACD,CALG,EAMHW,KANG,CAMIC,KAAD,IAAW;QAChBC,OAAO,CAACC,GAAR,CAAYF,KAAZ;QACAC,OAAO,CAACC,GAAR,CAAY,+BAAZ;QACA,KAAKb,KAAL,GAAa,EAAb;MACD,CAVG,CAAN;IAWD,CAbM;;IAcPc,QAAQ,GAAG;MACT,IAAIC,aAAY,GAAIC,IAAI,CAACC,IAAL,CAAU,KAAKjB,KAAL,CAAWkB,MAAX,GAAoB,KAAKhB,OAAnC,CAApB;;MACA,KAAK,IAAIiB,KAAI,GAAI,CAAjB,EAAoBA,KAAI,IAAKJ,aAA7B,EAA4CI,KAAK,EAAjD,EAAqD;QACnD,KAAKhB,KAAL,CAAWiB,IAAX,CAAgBD,KAAhB;MACF;IACD,CAnBM;;IAoBPE,QAAQ,CAACrB,KAAD,EAAQ;MACd,IAAIC,IAAG,GAAI,KAAKA,IAAhB;MACA,IAAIC,OAAM,GAAI,KAAKA,OAAnB;MACA,IAAIoB,IAAG,GAAIrB,IAAG,GAAIC,OAAP,GAAiBA,OAA5B;MACA,IAAIqB,EAAC,GAAItB,IAAG,GAAIC,OAAhB;MACA,OAAOF,KAAK,CAACwB,KAAN,CAAYF,IAAZ,EAAkBC,EAAlB,CAAP;IACD,CA1BM;;IA2BP,MAAME,UAAN,CAAiBC,EAAjB,EAAqB;MACnB,IAAIC,OAAO,CAAC,wCAAD,CAAX,EAAuD;QACrD,MAAM9B,KAAI,CACP+B,IADG,CACG,eAAcF,EAAG,EADpB,EAEHlB,IAFG,CAEGC,QAAD,IAAc;UAClB,KAAKJ,QAAL;;UACA,IAAII,QAAJ,EAAc;YACZoB,KAAK,CAAC,0BAAD,CAAL;UACF;QACD,CAPG,EAQHnB,KARG,CAQIC,KAAD,IAAW;UAChBC,OAAO,CAACC,GAAR,CAAYF,KAAZ;QACD,CAVG,CAAN;MAWF;IACD;;EAzCM,CAfI;EA0DbmB,KAAK,EAAE;IACL9B,KAAK,GAAG;MACN,KAAKc,QAAL;IACD;;EAHI,CA1DM;EA+DbiB,QAAQ,EAAE;IACRC,cAAc,GAAG;MACf,OAAO,KAAKX,QAAL,CAAc,KAAKrB,KAAnB,CAAP;IACD;;EAHO;AA/DG,CAAf","names":["axios","name","data","blogs","page","perPage","pages","mounted","getBlogs","methods","get","then","response","catch","error","console","log","setPages","numberOfPages","Math","ceil","length","index","push","paginate","from","to","slice","deleteBlog","id","confirm","post","alert","watch","computed","displayedBlogs"],"sourceRoot":"","sources":["/var/www/html/newData/mansi/my-vuejs-final/src/views/ListOfBlog.vue"],"sourcesContent":["<template>\n  <link\n    href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css\"\n    rel=\"stylesheet\"\n    integrity=\"sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC\"\n    crossorigin=\"anonymous\"\n  />\n\n  <div class=\"row\">\n    <div class=\"col-12 mb-2 text-end\">\n      <router-link :to=\"{ name: 'apiAddNewBlog' }\" class=\"btn btn-primary\"\n        >Create</router-link\n      >\n    </div>\n    <div class=\"col-12\">\n      <div class=\"card\">\n        <div class=\"card-header\">\n          <h4>Blogs List</h4>\n        </div>\n        <div class=\"card-body\">\n          <div class=\"table-responsive\">\n            <table class=\"table table-bordered\">\n              <thead>\n                <tr>\n                  <th>ID</th>\n                  <th>Title</th>\n                  <th>Description</th>\n                  <th>Status</th>\n                  <th>Tag</th>\n                  <th>Order</th>\n                  <th>Actions</th>\n                </tr>\n              </thead>\n              <tbody v-if=\"blogs\">\n                <tr v-for=\"blog in blogs.data\" :key=\"blog.id\">\n                  <td>{{ blog.id }}</td>\n                  <td>{{ blog.title }}</td>\n                  <td>{{ blog.description }}</td>\n                  <td>{{ blog.status }}</td>\n                  <td>{{ blog.tag }}</td>\n                  <td>{{ blog.order }}</td>\n                  <td>\n                    <router-link\n                      :to=\"{ name: 'apiEditBlog', params: { id: blog.id } }\"\n                      class=\"btn btn-success\"\n                      >Edit</router-link\n                    >\n                    <button\n                      type=\"button\"\n                      @click=\"deleteBlog(blog.id)\"\n                      class=\"btn btn-danger\"\n                    >\n                      Delete\n                    </button>\n                  </td>\n                </tr>\n              </tbody>\n              <tbody v-else>\n                <tr>\n                  <td colspan=\"4\" align=\"center\">No Blogs Found.</td>\n                </tr>\n              </tbody>\n            </table>\n\n            <!-- <PaginationComponent :data=\"blogs\" @pagination-change-page=\"getBlogs\">\n            </PaginationComponent> -->\n            <div class=\"clearfix btn-group col-md-2 offset-md-5\">\n              <button\n                type=\"button\"\n                class=\"btn btn-sm btn-outline-secondary\"\n                v-if=\"page != 1\"\n                @click=\"page--\"\n              >\n                >>\n              </button>\n              <button\n                type=\"button\"\n                class=\"btn btn-sm btn-outline-secondary\"\n                v-for=\"pageNumber in pages.slice(page - 1, page + 5)\"\n                :key=\"pageNumber\"\n                @click=\"page = pageNumber\"\n              >\n                {{ pageNumber }}\n              </button>\n              <button\n                type=\"button\"\n                class=\"btn btn-sm btn-outline-secondary\"\n                @click=\"page++\"\n                v-if=\"page < pages.length\"\n              >\n                Next\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n<script>\nimport axios from \"axios\";\n// import LaravelVuePagination from \"laravel-vue-pagination\";\n// import NewPagination from \"@/components/NewPagination.vue\";\nexport default {\n  name: \"ListOfBlog\",\n  // components: { NewPagination },\n  // components: { LaravelVuePagination },\n  data() {\n    return {\n      blogs: [],\n      page: 1,\n      perPage: 3,\n      pages: [],\n    };\n  },\n  mounted() {\n    this.getBlogs();\n  },\n  methods: {\n    async getBlogs() {\n      await axios\n        .get(\"/getAllBlog?page=\" + this.perPage, this.blogs)\n        .then((response) => {\n          // this.blogs = response.data;\n          this.blogs = response.data;\n        })\n        .catch((error) => {\n          console.log(error);\n          console.log(\"handle server error from here\");\n          this.blogs = [];\n        });\n    },\n    setPages() {\n      let numberOfPages = Math.ceil(this.blogs.length / this.perPage);\n      for (let index = 1; index <= numberOfPages; index++) {\n        this.pages.push(index);\n      }\n    },\n    paginate(blogs) {\n      let page = this.page;\n      let perPage = this.perPage;\n      let from = page * perPage - perPage;\n      let to = page * perPage;\n      return blogs.slice(from, to);\n    },\n    async deleteBlog(id) {\n      if (confirm(\"Are you sure to delete this category ?\")) {\n        await axios\n          .post(`destroyBlog/${id}`)\n          .then((response) => {\n            this.getBlogs();\n            if (response) {\n              alert(\"blog deleted sucessfully\");\n            }\n          })\n          .catch((error) => {\n            console.log(error);\n          });\n      }\n    },\n  },\n  watch: {\n    blogs() {\n      this.setPages();\n    },\n  },\n  computed: {\n    displayedBlogs() {\n      return this.paginate(this.blogs);\n    },\n  },\n};\n</script>\n"]},"metadata":{},"sourceType":"module"}