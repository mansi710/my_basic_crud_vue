{"ast":null,"code":"import { createElementVNode as _createElementVNode, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\n\nconst _hoisted_1 = /*#__PURE__*/_createElementVNode(\"link\", {\n  href: \"https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css\",\n  rel: \"stylesheet\",\n  integrity: \"sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC\",\n  crossorigin: \"anonymous\"\n}, null, -1\n/* HOISTED */\n);\n\nconst _hoisted_2 = /*#__PURE__*/_createElementVNode(\"nav\", {\n  \"aria-label\": \"Page navigation example\"\n}, null, -1\n/* HOISTED */\n);\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(_Fragment, null, [_hoisted_1, _hoisted_2], 64\n  /* STABLE_FRAGMENT */\n  );\n}","map":{"version":3,"mappings":";;gCACEA,oBAKE,MALF,EAKE;EAJAC,IAAI,EAAC,yEAIL;EAHAC,GAAG,EAAC,YAGJ;EAFAC,SAAS,EAAC,yEAEV;EADAC,WAAW,EAAC;AACZ,CALF;;AAAA;;gCAMAJ,oBAEM,KAFN,EAEM;EAFD,cAAW;AAEV,CAFN,EAAyC,IAAzC,EAAyC;AAAA;AAAzC;;;6DANAK,YAMAC","names":["_createElementVNode","href","rel","integrity","crossorigin","_hoisted_1","_hoisted_2"],"sourceRoot":"","sources":["/var/www/html/newData/mansi/my-vuejs-final/src/components/NewPagination.vue"],"sourcesContent":["<template>\n  <link\n    href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css\"\n    rel=\"stylesheet\"\n    integrity=\"sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC\"\n    crossorigin=\"anonymous\"\n  />\n  <nav aria-label=\"Page navigation example\">\n\n  </nav>\n \n</template>\n<script>\nexport default {\n  props: {\n    pagination: {\n      type: Number,\n      required: true,\n    },\n    offset: {\n      type: Number,\n      default: 4,\n    },\n  },\n  computed: {\n    pagesNumber() {\n      console.log(this.pagination.current_page);\n      if (!this.pagination.to) {\n        return [];\n      }\n      let from = this.pagination.current_page - this.offset;\n      if (from < 1) {\n        from = 1;\n      }\n      let to = from + this.offset * 2;\n      if (to >= this.pagination.last_page) {\n        to = this.pagination.last_page;\n      }\n      let pagesArray = [];\n      for (let page = from; page <= to; page++) {\n        pagesArray.push(page);\n      }\n      return pagesArray;\n    },\n  },\n  methods: {\n    da() {\n      console.log(this.pagination.current_page);\n    },\n\n    // changePage(page) {\n    //   console.log(page);\n    //   this.pagination.current_page = page;\n    //   this.$emit(\"paginate\");\n    // },\n  },\n};\n</script>\n"]},"metadata":{},"sourceType":"module"}