{"ast":null,"code":"// import { required, minLength, maxLength, sameAs } from \"vuelidate/lib/validators\";\nimport axios from \"axios\";\nexport default {\n  name: \"CreatePost\",\n\n  data() {\n    return {\n      formData: {\n        // userId: \"\",\n        name: \"\",\n        email: \"\",\n        password: \"\",\n        confirm_password: \"\",\n        submitted: false\n      },\n      rules: [// { message: \"One lowercase letter required.\", regex: /[a-z]+/ },\n      // { message: \"One uppercase letter required.\", regex: /[A-Z]+/ },\n      {\n        message: \"8 characters minimum.\",\n        regex: /.{8,}/\n      }, {\n        message: \"number required.\",\n        regex: /[0-9]+/\n      }]\n    };\n  },\n\n  methods: {\n    CreatePost() {\n      axios.post(\"register\", this.formData).then(response => console.log(response)).catch(error => console.log(error));\n      this.$router.push({\n        name: \"apiLogin\"\n      });\n    }\n\n  },\n  computed: {\n    notSamePasswords() {\n      if (this.passwordsFilled) {\n        return this.formData.password !== this.formData.confirm_password;\n      } else {\n        return false;\n      }\n    },\n\n    passwordsFilled() {\n      return this.formData.password !== \"\" && this.formData.confirm_password !== \"\";\n    },\n\n    passwordValidation() {\n      let errors = [];\n\n      for (let condition of this.rules) {\n        if (!condition.regex.test(this.formData.password)) {\n          errors.push(condition.message);\n        } // return { $router({ name:\"apiLogin\"}) };\n\n      }\n\n      if (errors.length === 0) {\n        return {\n          valid: true,\n          errors\n        };\n      } else {\n        return {\n          valid: false,\n          errors\n        };\n      }\n    }\n\n  }\n};","map":{"version":3,"mappings":"AAuHA;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,eAAe;EACbC,IAAI,EAAE,YADO;;EAEbC,IAAI,GAAG;IACL,OAAO;MACLC,QAAQ,EAAE;QACR;QACAF,IAAI,EAAE,EAFE;QAGRG,KAAK,EAAE,EAHC;QAIRC,QAAQ,EAAE,EAJF;QAKRC,gBAAgB,EAAE,EALV;QAMRC,SAAS,EAAE;MANH,CADL;MASLC,KAAK,EAAE,CACL;MACA;MACA;QAAEC,OAAO,EAAE,uBAAX;QAAoCC,KAAK,EAAE;MAA3C,CAHK,EAIL;QAAED,OAAO,EAAE,kBAAX;QAA+BC,KAAK,EAAE;MAAtC,CAJK;IATF,CAAP;EAgBD,CAnBY;;EAoBbC,OAAO,EAAE;IACPC,UAAU,GAAG;MACXZ,KAAI,CACDa,IADH,CACQ,UADR,EACoB,KAAKV,QADzB,EAEGW,IAFH,CAESC,QAAD,IAAcC,OAAO,CAACC,GAAR,CAAYF,QAAZ,CAFtB,EAGGG,KAHH,CAGUC,KAAD,IAAWH,OAAO,CAACC,GAAR,CAAYE,KAAZ,CAHpB;MAKA,KAAKC,OAAL,CAAaC,IAAb,CAAkB;QAAEpB,IAAI,EAAE;MAAR,CAAlB;IACD;;EARM,CApBI;EA8BbqB,QAAQ,EAAE;IACRC,gBAAgB,GAAG;MACjB,IAAI,KAAKC,eAAT,EAA0B;QACxB,OAAO,KAAKrB,QAAL,CAAcE,QAAd,KAA2B,KAAKF,QAAL,CAAcG,gBAAhD;MACF,CAFA,MAEO;QACL,OAAO,KAAP;MACF;IACD,CAPO;;IAQRkB,eAAe,GAAG;MAChB,OAAO,KAAKrB,QAAL,CAAcE,QAAd,KAA2B,EAA3B,IAAiC,KAAKF,QAAL,CAAcG,gBAAd,KAAmC,EAA3E;IACD,CAVO;;IAWRmB,kBAAkB,GAAG;MACnB,IAAIC,MAAK,GAAI,EAAb;;MACA,KAAK,IAAIC,SAAT,IAAsB,KAAKnB,KAA3B,EAAkC;QAChC,IAAI,CAACmB,SAAS,CAACjB,KAAV,CAAgBkB,IAAhB,CAAqB,KAAKzB,QAAL,CAAcE,QAAnC,CAAL,EAAmD;UACjDqB,MAAM,CAACL,IAAP,CAAYM,SAAS,CAAClB,OAAtB;QACF,CAHgC,CAIhC;;MACF;;MACA,IAAIiB,MAAM,CAACG,MAAP,KAAkB,CAAtB,EAAyB;QACvB,OAAO;UAAEC,KAAK,EAAE,IAAT;UAAeJ;QAAf,CAAP;MACF,CAFA,MAEO;QACL,OAAO;UAAEI,KAAK,EAAE,KAAT;UAAgBJ;QAAhB,CAAP;MACF;IACD;;EAxBO;AA9BG,CAAf","names":["axios","name","data","formData","email","password","confirm_password","submitted","rules","message","regex","methods","CreatePost","post","then","response","console","log","catch","error","$router","push","computed","notSamePasswords","passwordsFilled","passwordValidation","errors","condition","test","length","valid"],"sourceRoot":"","sources":["/var/www/html/newData/mansi/my-vuejs-final/src/views/RegisterC.vue"],"sourcesContent":["<template>\n  <!-- <div>\n    <form @submit.prevent=\"CreatePost\">\n      <div>\n        <label for=\"name\">User Name</label>\n        <input\n          type=\"text\"\n          id=\"name\"\n          v-model=\"formData.name\"\n          placeholder=\"Enter name\"\n          class=\"input\"\n          required\n        />\n      </div>\n      <div>\n        <label for=\"email\">User Email</label>\n        <input\n          type=\"text\"\n          id=\"email\"\n          v-model=\"formData.email\"\n          placeholder=\"Enter Email\"\n          class=\"input\"\n          required\n        />\n      </div>\n      <div>\n        <label for=\"password\">password</label>\n        <input\n          type=\"text\"\n          id=\"password\"\n          v-model=\"formData.password\"\n          placeholder=\"Enter Password\"\n          class=\"input\"\n          :class=\"{ valid: passwordValidation.valid }\"\n          required\n        />\n      </div>\n      <div>\n        <label for=\"C_pwd\">Confirm Password</label>\n        <input\n          type=\"text\"\n          id=\"c_password\"\n          v-model=\"formData.confirm_password\"\n          placeholder=\"Enter Confirm Password\"\n          class=\"input\"\n          required\n        />\n      </div>\n      <p v-for=\"error in passwordValidation.errors\" :key=\"error.id\">\n        {{ error }}\n      </p>\n      <transition name=\"hint\" appear>\n        <div\n          v-if=\"passwordValidation.errors.length > 0 && !submitted\"\n          class=\"hints\"\n        ></div>\n      </transition>\n      <div class=\"matches\" v-if=\"notSamePasswords\">\n        <p>Passwords don't match.</p>\n      </div>\n      <button class=\"btn\">Sign Up</button>\n    </form>\n  </div> -->\n\n  <div class=\"container\">\n    <form @submit.prevent=\"CreatePost\" id=\"page\">\n      <div class=\"container\"></div>\n      <div class=\"card-header\">\n        <h4>Register</h4>\n      </div>\n      <div class=\"form-group row\">\n        <validation-errors\n          :errors=\"validationErrors\"\n          class=\"alert alert-danger\"\n          v-if=\"validationErrors\"\n          id=\"err\"\n        >\n          {{ validationErrors }}\n        </validation-errors>\n      </div>\n\n      <br />\n      <div class=\"form-group row\">\n        <label for=\"title\" class=\"col-sm-2 col-form-label\"> Enter Email </label>\n        <div class=\"col-sm-8\">\n          <input\n            type=\"text\"\n            class=\"form-control\"\n            placeholder=\"enter your email\"\n            v-model=\"login.email\"\n          />\n        </div>\n      </div>\n      <br />\n      <div class=\"form-group row\">\n        <label for=\"title\" class=\"col-sm-2 col-form-label\"> Enter Password </label>\n        <div class=\"col-sm-8\">\n          <input\n            type=\"text\"\n            class=\"form-control\"\n            id=\"title\"\n            placeholder=\"enter your password\"\n            v-model=\"login.password\"\n          />\n        </div>\n      </div>\n      <br />\n      <div class=\"form-group row\">\n        <div class=\"col-sm-10\">\n          <button type=\"submit\" class=\"btn btn-primary\">Login</button>\n        </div>\n      </div>\n      <br />\n      <router-link to=\"/apiForgotPassword\">Forgot Password</router-link>\n    </form>\n  </div>\n</template>\n\n<script>\n// import { required, minLength, maxLength, sameAs } from \"vuelidate/lib/validators\";\nimport axios from \"axios\";\nexport default {\n  name: \"CreatePost\",\n  data() {\n    return {\n      formData: {\n        // userId: \"\",\n        name: \"\",\n        email: \"\",\n        password: \"\",\n        confirm_password: \"\",\n        submitted: false,\n      },\n      rules: [\n        // { message: \"One lowercase letter required.\", regex: /[a-z]+/ },\n        // { message: \"One uppercase letter required.\", regex: /[A-Z]+/ },\n        { message: \"8 characters minimum.\", regex: /.{8,}/ },\n        { message: \"number required.\", regex: /[0-9]+/ },\n      ],\n    };\n  },\n  methods: {\n    CreatePost() {\n      axios\n        .post(\"register\", this.formData)\n        .then((response) => console.log(response))\n        .catch((error) => console.log(error));\n\n      this.$router.push({ name: \"apiLogin\" });\n    },\n  },\n  computed: {\n    notSamePasswords() {\n      if (this.passwordsFilled) {\n        return this.formData.password !== this.formData.confirm_password;\n      } else {\n        return false;\n      }\n    },\n    passwordsFilled() {\n      return this.formData.password !== \"\" && this.formData.confirm_password !== \"\";\n    },\n    passwordValidation() {\n      let errors = [];\n      for (let condition of this.rules) {\n        if (!condition.regex.test(this.formData.password)) {\n          errors.push(condition.message);\n        }\n        // return { $router({ name:\"apiLogin\"}) };\n      }\n      if (errors.length === 0) {\n        return { valid: true, errors };\n      } else {\n        return { valid: false, errors };\n      }\n    },\n  },\n};\n</script>\n<style>\n.invalid-feedback {\n  color: red;\n}\n.hints {\n  max-width: 400px;\n  padding: 1em;\n  background: whitesmoke;\n  margin: 1em 0;\n  font-size: 0.9em;\n  color: darken(#d4dedf, 50%);\n  h2 {\n    margin: 0.5em 0 0.2em 0;\n  }\n  p {\n    margin: 0;\n    padding-left: 1em;\n    &::before {\n      content: \">\";\n      font-size: 0.9em;\n      margin-right: 6px;\n      display: inline-block;\n    }\n  }\n}\n#page {\n  margin-top: 100px;\n}\n</style>\n"]},"metadata":{},"sourceType":"module"}